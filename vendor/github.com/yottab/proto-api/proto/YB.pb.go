// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: YB.proto

package yb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ActivityTag int32

const (
	ActivityTag_None          ActivityTag = 0 //No tag
	ActivityTag_User          ActivityTag = 1 // User_Authentication, User_Setting, ...
	ActivityTag_Payment       ActivityTag = 2
	ActivityTag_Application   ActivityTag = 3
	ActivityTag_Domain        ActivityTag = 4
	ActivityTag_Service       ActivityTag = 5
	ActivityTag_Image         ActivityTag = 6
	ActivityTag_ObjectStorage ActivityTag = 7
	ActivityTag_BlockStorage  ActivityTag = 8
	// Bindings
	ActivityTag_AppSrvBinding ActivityTag = 9
	ActivityTag_AppDomBinding ActivityTag = 10
	ActivityTag_AppVolBinding ActivityTag = 11
	ActivityTag_SrvDomBinding ActivityTag = 12
)

// Enum value maps for ActivityTag.
var (
	ActivityTag_name = map[int32]string{
		0:  "None",
		1:  "User",
		2:  "Payment",
		3:  "Application",
		4:  "Domain",
		5:  "Service",
		6:  "Image",
		7:  "ObjectStorage",
		8:  "BlockStorage",
		9:  "AppSrvBinding",
		10: "AppDomBinding",
		11: "AppVolBinding",
		12: "SrvDomBinding",
	}
	ActivityTag_value = map[string]int32{
		"None":          0,
		"User":          1,
		"Payment":       2,
		"Application":   3,
		"Domain":        4,
		"Service":       5,
		"Image":         6,
		"ObjectStorage": 7,
		"BlockStorage":  8,
		"AppSrvBinding": 9,
		"AppDomBinding": 10,
		"AppVolBinding": 11,
		"SrvDomBinding": 12,
	}
)

func (x ActivityTag) Enum() *ActivityTag {
	p := new(ActivityTag)
	*p = x
	return p
}

func (x ActivityTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActivityTag) Descriptor() protoreflect.EnumDescriptor {
	return file_YB_proto_enumTypes[0].Descriptor()
}

func (ActivityTag) Type() protoreflect.EnumType {
	return &file_YB_proto_enumTypes[0]
}

func (x ActivityTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActivityTag.Descriptor instead.
func (ActivityTag) EnumDescriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{0}
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{0}
}

func (x *LoginReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthenticationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AuthenticationRes) Reset() {
	*x = AuthenticationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationRes) ProtoMessage() {}

func (x *AuthenticationRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationRes.ProtoReflect.Descriptor instead.
func (*AuthenticationRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{1}
}

func (x *AuthenticationRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credits  string `protobuf:"bytes,1,opt,name=credits,proto3" json:"credits,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Email    string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Plan     string `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	Address  string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Code     string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Mobi     string `protobuf:"bytes,7,opt,name=mobi,proto3" json:"mobi,omitempty"`
	//variables will be skipped in a update request
	Variables map[string]*GeneralVariable `protobuf:"bytes,8,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{2}
}

func (x *Account) GetCredits() string {
	if x != nil {
		return x.Credits
	}
	return ""
}

func (x *Account) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Account) GetMobi() string {
	if x != nil {
		return x.Mobi
	}
	return ""
}

func (x *Account) GetVariables() map[string]*GeneralVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{3}
}

// ID for select [service, application, image]
type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{4}
}

func (x *Identity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents seconds of UTC time since Unix epoch
	// 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	// 9999-12-31T23:59:59Z inclusive.
	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// Non-negative fractions of a second at nanosecond resolution. Negative
	// second values with fractions must still have non-negative nanos values
	// that count forward in time. Must be from 0 to 999,999,999
	// inclusive.
	Nanos int32 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{5}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type GeneralVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value        string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DefaultValue string   `protobuf:"bytes,3,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
	IsRequired   bool     `protobuf:"varint,4,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	Updateable   bool     `protobuf:"varint,5,opt,name=updateable,proto3" json:"updateable,omitempty"`
	Type         string   `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Description  string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Choices      []string `protobuf:"bytes,8,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *GeneralVariable) Reset() {
	*x = GeneralVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralVariable) ProtoMessage() {}

func (x *GeneralVariable) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralVariable.ProtoReflect.Descriptor instead.
func (*GeneralVariable) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{6}
}

func (x *GeneralVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeneralVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GeneralVariable) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *GeneralVariable) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *GeneralVariable) GetUpdateable() bool {
	if x != nil {
		return x.Updateable
	}
	return false
}

func (x *GeneralVariable) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GeneralVariable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GeneralVariable) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

type AttachIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attachment string `protobuf:"bytes,2,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *AttachIdentity) Reset() {
	*x = AttachIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachIdentity) ProtoMessage() {}

func (x *AttachIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachIdentity.ProtoReflect.Descriptor instead.
func (*AttachIdentity) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{7}
}

func (x *AttachIdentity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AttachIdentity) GetAttachment() string {
	if x != nil {
		return x.Attachment
	}
	return ""
}

type AppListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	App   string `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`      // To get a list of all the applications, dont sent application name
}

func (x *AppListReq) Reset() {
	*x = AppListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppListReq) ProtoMessage() {}

func (x *AppListReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppListReq.ProtoReflect.Descriptor instead.
func (*AppListReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{8}
}

func (x *AppListReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AppListReq) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

type ListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{9}
}

func (x *ListReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ListStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *ListStatusRes) Reset() {
	*x = ListStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusRes) ProtoMessage() {}

func (x *ListStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusRes.ProtoReflect.Descriptor instead.
func (*ListStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{10}
}

func (x *ListStatusRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ListStatusRes) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{11}
}

func (x *Chunk) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type PortforwardRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Svc       string   `protobuf:"bytes,1,opt,name=svc,proto3" json:"svc,omitempty"`
	Ports     []string `protobuf:"bytes,2,rep,name=ports,proto3" json:"ports,omitempty"`
	Token     []byte   `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	ProxyHost string   `protobuf:"bytes,4,opt,name=proxyHost,proto3" json:"proxyHost,omitempty"`
}

func (x *PortforwardRes) Reset() {
	*x = PortforwardRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortforwardRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortforwardRes) ProtoMessage() {}

func (x *PortforwardRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortforwardRes.ProtoReflect.Descriptor instead.
func (*PortforwardRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{12}
}

func (x *PortforwardRes) GetSvc() string {
	if x != nil {
		return x.Svc
	}
	return ""
}

func (x *PortforwardRes) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *PortforwardRes) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PortforwardRes) GetProxyHost() string {
	if x != nil {
		return x.ProxyHost
	}
	return ""
}

type DomainCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Tls    bool   `protobuf:"varint,2,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *DomainCreateReq) Reset() {
	*x = DomainCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainCreateReq) ProtoMessage() {}

func (x *DomainCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainCreateReq.ProtoReflect.Descriptor instead.
func (*DomainCreateReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{13}
}

func (x *DomainCreateReq) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainCreateReq) GetTls() bool {
	if x != nil {
		return x.Tls
	}
	return false
}

type DomainAttachedTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *DomainAttachedTo) Reset() {
	*x = DomainAttachedTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainAttachedTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainAttachedTo) ProtoMessage() {}

func (x *DomainAttachedTo) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainAttachedTo.ProtoReflect.Descriptor instead.
func (*DomainAttachedTo) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{14}
}

func (x *DomainAttachedTo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainAttachedTo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DomainAttachedTo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type DomainStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created    *Timestamp          `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Updated    *Timestamp          `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Domain     string              `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Tls        string              `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`
	AttachedTo []*DomainAttachedTo `protobuf:"bytes,5,rep,name=attachedTo,proto3" json:"attachedTo,omitempty"`
}

func (x *DomainStatusRes) Reset() {
	*x = DomainStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainStatusRes) ProtoMessage() {}

func (x *DomainStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainStatusRes.ProtoReflect.Descriptor instead.
func (*DomainStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{15}
}

func (x *DomainStatusRes) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DomainStatusRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *DomainStatusRes) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DomainStatusRes) GetTls() string {
	if x != nil {
		return x.Tls
	}
	return ""
}

func (x *DomainStatusRes) GetAttachedTo() []*DomainAttachedTo {
	if x != nil {
		return x.AttachedTo
	}
	return nil
}

type DomainListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Domains []*DomainStatusRes `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *DomainListRes) Reset() {
	*x = DomainListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainListRes) ProtoMessage() {}

func (x *DomainListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainListRes.ProtoReflect.Descriptor instead.
func (*DomainListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{16}
}

func (x *DomainListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DomainListRes) GetDomains() []*DomainStatusRes {
	if x != nil {
		return x.Domains
	}
	return nil
}

//For embedded response
//AttachedDomainInfo Deprecated: will be deleted in v3.0
type AttachedDomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain       string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Endpoint     string `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	EndpointType string `protobuf:"bytes,3,opt,name=endpointType,proto3" json:"endpointType,omitempty"`
	//Added in v2.3 patch
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *AttachedDomainInfo) Reset() {
	*x = AttachedDomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedDomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDomainInfo) ProtoMessage() {}

func (x *AttachedDomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDomainInfo.ProtoReflect.Descriptor instead.
func (*AttachedDomainInfo) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{17}
}

func (x *AttachedDomainInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AttachedDomainInfo) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *AttachedDomainInfo) GetEndpointType() string {
	if x != nil {
		return x.EndpointType
	}
	return ""
}

func (x *AttachedDomainInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type VolumeCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Spec string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *VolumeCreateReq) Reset() {
	*x = VolumeCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeCreateReq) ProtoMessage() {}

func (x *VolumeCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeCreateReq.ProtoReflect.Descriptor instead.
func (*VolumeCreateReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{18}
}

func (x *VolumeCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeCreateReq) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

type VolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Attachment string `protobuf:"bytes,2,opt,name=attachment,proto3" json:"attachment,omitempty"`
	MountPath  string `protobuf:"bytes,3,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
}

func (x *VolumeMount) Reset() {
	*x = VolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMount) ProtoMessage() {}

func (x *VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMount.ProtoReflect.Descriptor instead.
func (*VolumeMount) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{19}
}

func (x *VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeMount) GetAttachment() string {
	if x != nil {
		return x.Attachment
	}
	return ""
}

func (x *VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type VolumeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Class string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Size  string `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *VolumeSpec) Reset() {
	*x = VolumeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpec) ProtoMessage() {}

func (x *VolumeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpec.ProtoReflect.Descriptor instead.
func (*VolumeSpec) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{20}
}

func (x *VolumeSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeSpec) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *VolumeSpec) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

type VolumeSpecListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	VolumeSpecs []*VolumeSpec `protobuf:"bytes,2,rep,name=volumeSpecs,proto3" json:"volumeSpecs,omitempty"`
}

func (x *VolumeSpecListRes) Reset() {
	*x = VolumeSpecListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeSpecListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeSpecListRes) ProtoMessage() {}

func (x *VolumeSpecListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeSpecListRes.ProtoReflect.Descriptor instead.
func (*VolumeSpecListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{21}
}

func (x *VolumeSpecListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VolumeSpecListRes) GetVolumeSpecs() []*VolumeSpec {
	if x != nil {
		return x.VolumeSpecs
	}
	return nil
}

type VolumeStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *Timestamp     `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Updated *Timestamp     `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Name    string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Spec    *VolumeSpec    `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Mounts  []*VolumeMount `protobuf:"bytes,5,rep,name=mounts,proto3" json:"mounts,omitempty"`
}

func (x *VolumeStatusRes) Reset() {
	*x = VolumeStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeStatusRes) ProtoMessage() {}

func (x *VolumeStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeStatusRes.ProtoReflect.Descriptor instead.
func (*VolumeStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{22}
}

func (x *VolumeStatusRes) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *VolumeStatusRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *VolumeStatusRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VolumeStatusRes) GetSpec() *VolumeSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *VolumeStatusRes) GetMounts() []*VolumeMount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type VolumeListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int32              `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Volumes []*VolumeStatusRes `protobuf:"bytes,2,rep,name=volumes,proto3" json:"volumes,omitempty"`
}

func (x *VolumeListRes) Reset() {
	*x = VolumeListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeListRes) ProtoMessage() {}

func (x *VolumeListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeListRes.ProtoReflect.Descriptor instead.
func (*VolumeListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{23}
}

func (x *VolumeListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VolumeListRes) GetVolumes() []*VolumeStatusRes {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type ImgStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Updated *Timestamp `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Name    string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Tags    []string   `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ImgStatusRes) Reset() {
	*x = ImgStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgStatusRes) ProtoMessage() {}

func (x *ImgStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgStatusRes.ProtoReflect.Descriptor instead.
func (*ImgStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{24}
}

func (x *ImgStatusRes) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ImgStatusRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *ImgStatusRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImgStatusRes) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ImgListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32           `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Imgs  []*ImgStatusRes `protobuf:"bytes,2,rep,name=imgs,proto3" json:"imgs,omitempty"`
}

func (x *ImgListRes) Reset() {
	*x = ImgListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgListRes) ProtoMessage() {}

func (x *ImgListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgListRes.ProtoReflect.Descriptor instead.
func (*ImgListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{25}
}

func (x *ImgListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ImgListRes) GetImgs() []*ImgStatusRes {
	if x != nil {
		return x.Imgs
	}
	return nil
}

type ImgBuildReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepositoryTag  string `protobuf:"bytes,1,opt,name=repositoryTag,proto3" json:"repositoryTag,omitempty"`
	RepositoryName string `protobuf:"bytes,2,opt,name=repositoryName,proto3" json:"repositoryName,omitempty"`
}

func (x *ImgBuildReq) Reset() {
	*x = ImgBuildReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImgBuildReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImgBuildReq) ProtoMessage() {}

func (x *ImgBuildReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImgBuildReq.ProtoReflect.Descriptor instead.
func (*ImgBuildReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{26}
}

func (x *ImgBuildReq) GetRepositoryTag() string {
	if x != nil {
		return x.RepositoryTag
	}
	return ""
}

func (x *ImgBuildReq) GetRepositoryName() string {
	if x != nil {
		return x.RepositoryName
	}
	return ""
}

type ServiceCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition string     `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Reason    string     `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Time      *Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *ServiceCondition) Reset() {
	*x = ServiceCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceCondition) ProtoMessage() {}

func (x *ServiceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceCondition.ProtoReflect.Descriptor instead.
func (*ServiceCondition) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{27}
}

func (x *ServiceCondition) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *ServiceCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ServiceCondition) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ProductRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Plan        []*Plan                     `protobuf:"bytes,3,rep,name=plan,proto3" json:"plan,omitempty"`
	Variables   map[string]*GeneralVariable `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProductRes) Reset() {
	*x = ProductRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRes) ProtoMessage() {}

func (x *ProductRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRes.ProtoReflect.Descriptor instead.
func (*ProductRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{28}
}

func (x *ProductRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductRes) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProductRes) GetPlan() []*Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *ProductRes) GetVariables() map[string]*GeneralVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type ProductListRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ProductListRow) Reset() {
	*x = ProductListRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductListRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductListRow) ProtoMessage() {}

func (x *ProductListRow) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductListRow.ProtoReflect.Descriptor instead.
func (*ProductListRow) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{29}
}

func (x *ProductListRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductListRow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PrdListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Rows  []*ProductListRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *PrdListRes) Reset() {
	*x = PrdListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrdListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrdListRes) ProtoMessage() {}

func (x *PrdListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrdListRes.ProtoReflect.Descriptor instead.
func (*PrdListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{30}
}

func (x *PrdListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PrdListRes) GetRows() []*ProductListRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

//TODO reset Variable
type SrvConfigSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Values map[string]string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SrvConfigSetReq) Reset() {
	*x = SrvConfigSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvConfigSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvConfigSetReq) ProtoMessage() {}

func (x *SrvConfigSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvConfigSetReq.ProtoReflect.Descriptor instead.
func (*SrvConfigSetReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{31}
}

func (x *SrvConfigSetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SrvConfigSetReq) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Price       uint64            `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Off         uint64            `protobuf:"varint,4,opt,name=off,proto3" json:"off,omitempty"`
	Extras      map[string]string `protobuf:"bytes,5,rep,name=extras,proto3" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{32}
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Plan) GetOff() uint64 {
	if x != nil {
		return x.Off
	}
	return 0
}

func (x *Plan) GetExtras() map[string]string {
	if x != nil {
		return x.Extras
	}
	return nil
}

type SrvStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created      *Timestamp            `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Updated      *Timestamp            `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Conditions   []*ServiceCondition   `protobuf:"bytes,3,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Name         string                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Plan         string                `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	VcapServices string                `protobuf:"bytes,6,opt,name=vcapServices,proto3" json:"vcapServices,omitempty"`
	Domains      []*AttachedDomainInfo `protobuf:"bytes,7,rep,name=domains,proto3" json:"domains,omitempty"`
	Endpoints    []string              `protobuf:"bytes,8,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	//Added in v2.1 patch
	ServiceRefrence string `protobuf:"bytes,9,opt,name=serviceRefrence,proto3" json:"serviceRefrence,omitempty"`
	//Name(s) of the peer(s) that this service instance bounded to
	BoundTo   []string                    `protobuf:"bytes,10,rep,name=boundTo,proto3" json:"boundTo,omitempty"`
	Variables map[string]*GeneralVariable `protobuf:"bytes,11,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SrvStatusRes) Reset() {
	*x = SrvStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvStatusRes) ProtoMessage() {}

func (x *SrvStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvStatusRes.ProtoReflect.Descriptor instead.
func (*SrvStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{33}
}

func (x *SrvStatusRes) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *SrvStatusRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *SrvStatusRes) GetConditions() []*ServiceCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *SrvStatusRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SrvStatusRes) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *SrvStatusRes) GetVcapServices() string {
	if x != nil {
		return x.VcapServices
	}
	return ""
}

func (x *SrvStatusRes) GetDomains() []*AttachedDomainInfo {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *SrvStatusRes) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *SrvStatusRes) GetServiceRefrence() string {
	if x != nil {
		return x.ServiceRefrence
	}
	return ""
}

func (x *SrvStatusRes) GetBoundTo() []string {
	if x != nil {
		return x.BoundTo
	}
	return nil
}

func (x *SrvStatusRes) GetVariables() map[string]*GeneralVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type PunchedCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Oprator string            `protobuf:"bytes,2,opt,name=oprator,proto3" json:"oprator,omitempty"`
	Values  map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PunchedCard) Reset() {
	*x = PunchedCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PunchedCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PunchedCard) ProtoMessage() {}

func (x *PunchedCard) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PunchedCard.ProtoReflect.Descriptor instead.
func (*PunchedCard) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{34}
}

func (x *PunchedCard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PunchedCard) GetOprator() string {
	if x != nil {
		return x.Oprator
	}
	return ""
}

func (x *PunchedCard) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

//For embedded response
type ServiceRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updated *Timestamp `protobuf:"bytes,1,opt,name=updated,proto3" json:"updated,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	//Added in v2.1 patch
	ServiceRefrence string `protobuf:"bytes,3,opt,name=serviceRefrence,proto3" json:"serviceRefrence,omitempty"`
	Plan            string `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	//Latest condition
	Condition *ServiceCondition `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *ServiceRes) Reset() {
	*x = ServiceRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRes) ProtoMessage() {}

func (x *ServiceRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRes.ProtoReflect.Descriptor instead.
func (*ServiceRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{35}
}

func (x *ServiceRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *ServiceRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceRes) GetServiceRefrence() string {
	if x != nil {
		return x.ServiceRefrence
	}
	return ""
}

func (x *ServiceRes) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *ServiceRes) GetCondition() *ServiceCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type SrvListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int32         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Services []*ServiceRes `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *SrvListRes) Reset() {
	*x = SrvListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvListRes) ProtoMessage() {}

func (x *SrvListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvListRes.ProtoReflect.Descriptor instead.
func (*SrvListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{36}
}

func (x *SrvListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SrvListRes) GetServices() []*ServiceRes {
	if x != nil {
		return x.Services
	}
	return nil
}

type SrvDomainAttachReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachIdentity *AttachIdentity `protobuf:"bytes,1,opt,name=attachIdentity,proto3" json:"attachIdentity,omitempty"`
	Endpoint       string          `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	//Added in v2.3 patch
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *SrvDomainAttachReq) Reset() {
	*x = SrvDomainAttachReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvDomainAttachReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvDomainAttachReq) ProtoMessage() {}

func (x *SrvDomainAttachReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvDomainAttachReq.ProtoReflect.Descriptor instead.
func (*SrvDomainAttachReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{37}
}

func (x *SrvDomainAttachReq) GetAttachIdentity() *AttachIdentity {
	if x != nil {
		return x.AttachIdentity
	}
	return nil
}

func (x *SrvDomainAttachReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *SrvDomainAttachReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type SrvCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductName string            `protobuf:"bytes,1,opt,name=productName,proto3" json:"productName,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Plan        string            `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Values      map[string]string `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SrvCreateReq) Reset() {
	*x = SrvCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SrvCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SrvCreateReq) ProtoMessage() {}

func (x *SrvCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SrvCreateReq.ProtoReflect.Descriptor instead.
func (*SrvCreateReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{38}
}

func (x *SrvCreateReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *SrvCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SrvCreateReq) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *SrvCreateReq) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

type AppStatusRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created              *Timestamp                  `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Updated              *Timestamp                  `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Plan                 string                      `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	VcapServices         string                      `protobuf:"bytes,5,opt,name=vcapServices,proto3" json:"vcapServices,omitempty"`
	Variables            map[string]*GeneralVariable `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnvironmentVariables map[string]string           `protobuf:"bytes,7,rep,name=environmentVariables,proto3" json:"environmentVariables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Instances            []*Instance                 `protobuf:"bytes,8,rep,name=instances,proto3" json:"instances,omitempty"`
	Conditions           []*ServiceCondition         `protobuf:"bytes,9,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Routes               []string                    `protobuf:"bytes,10,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *AppStatusRes) Reset() {
	*x = AppStatusRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppStatusRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatusRes) ProtoMessage() {}

func (x *AppStatusRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatusRes.ProtoReflect.Descriptor instead.
func (*AppStatusRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{39}
}

func (x *AppStatusRes) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AppStatusRes) GetUpdated() *Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *AppStatusRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppStatusRes) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *AppStatusRes) GetVcapServices() string {
	if x != nil {
		return x.VcapServices
	}
	return ""
}

func (x *AppStatusRes) GetVariables() map[string]*GeneralVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *AppStatusRes) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *AppStatusRes) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *AppStatusRes) GetConditions() []*ServiceCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *AppStatusRes) GetRoutes() []string {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ram     string     `protobuf:"bytes,3,opt,name=ram,proto3" json:"ram,omitempty"`
	Cpu     string     `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{40}
}

func (x *Instance) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Instance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instance) GetRam() string {
	if x != nil {
		return x.Ram
	}
	return ""
}

func (x *Instance) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

type AppCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Plan   string            `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	Values map[string]string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppCreateReq) Reset() {
	*x = AppCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppCreateReq) ProtoMessage() {}

func (x *AppCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppCreateReq.ProtoReflect.Descriptor instead.
func (*AppCreateReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{41}
}

func (x *AppCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppCreateReq) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *AppCreateReq) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// name for select [application, image]
type TailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//The length of time (like 5s, 2m, or 3h, higher than zero), default to 0s.
	Since string `protobuf:"bytes,2,opt,name=since,proto3" json:"since,omitempty"`
	Tail  uint64 `protobuf:"varint,3,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *TailRequest) Reset() {
	*x = TailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailRequest) ProtoMessage() {}

func (x *TailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailRequest.ProtoReflect.Descriptor instead.
func (*TailRequest) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{42}
}

func (x *TailRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TailRequest) GetSince() string {
	if x != nil {
		return x.Since
	}
	return ""
}

func (x *TailRequest) GetTail() uint64 {
	if x != nil {
		return x.Tail
	}
	return 0
}

// Execute commands inside an existing application
type ShellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command []string `protobuf:"bytes,2,rep,name=command,proto3" json:"command,omitempty"`
}

func (x *ShellReq) Reset() {
	*x = ShellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellReq) ProtoMessage() {}

func (x *ShellReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellReq.ProtoReflect.Descriptor instead.
func (*ShellReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{43}
}

func (x *ShellReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShellReq) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

type UnsetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables []string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *UnsetReq) Reset() {
	*x = UnsetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsetReq) ProtoMessage() {}

func (x *UnsetReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsetReq.ProtoReflect.Descriptor instead.
func (*UnsetReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{44}
}

func (x *UnsetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UnsetReq) GetVariables() []string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type AppAddEnvironmentVariableReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Variables map[string]string `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AppAddEnvironmentVariableReq) Reset() {
	*x = AppAddEnvironmentVariableReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppAddEnvironmentVariableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppAddEnvironmentVariableReq) ProtoMessage() {}

func (x *AppAddEnvironmentVariableReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppAddEnvironmentVariableReq.ProtoReflect.Descriptor instead.
func (*AppAddEnvironmentVariableReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{45}
}

func (x *AppAddEnvironmentVariableReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppAddEnvironmentVariableReq) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

type AppSrvBindReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *AppSrvBindReq) Reset() {
	*x = AppSrvBindReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppSrvBindReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppSrvBindReq) ProtoMessage() {}

func (x *AppSrvBindReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppSrvBindReq.ProtoReflect.Descriptor instead.
func (*AppSrvBindReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{46}
}

func (x *AppSrvBindReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppSrvBindReq) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type ResourcesRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     *Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`          // time of the beginning
	StepPerod uint64     `protobuf:"varint,2,opt,name=stepPerod,proto3" json:"stepPerod,omitempty"` // time interval
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Core      []uint64   `protobuf:"varint,4,rep,packed,name=core,proto3" json:"core,omitempty"`
	Ram       []uint64   `protobuf:"varint,5,rep,packed,name=ram,proto3" json:"ram,omitempty"`
}

func (x *ResourcesRes) Reset() {
	*x = ResourcesRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesRes) ProtoMessage() {}

func (x *ResourcesRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesRes.ProtoReflect.Descriptor instead.
func (*ResourcesRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{47}
}

func (x *ResourcesRes) GetStart() *Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ResourcesRes) GetStepPerod() uint64 {
	if x != nil {
		return x.StepPerod
	}
	return 0
}

func (x *ResourcesRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourcesRes) GetCore() []uint64 {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *ResourcesRes) GetRam() []uint64 {
	if x != nil {
		return x.Ram
	}
	return nil
}

type Hit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`       // path or domain of queries
	Hit  []uint64 `protobuf:"varint,2,rep,packed,name=hit,proto3" json:"hit,omitempty"` // QPS
}

func (x *Hit) Reset() {
	*x = Hit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hit) ProtoMessage() {}

func (x *Hit) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hit.ProtoReflect.Descriptor instead.
func (*Hit) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{48}
}

func (x *Hit) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Hit) GetHit() []uint64 {
	if x != nil {
		return x.Hit
	}
	return nil
}

type TrafficRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     *Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`          // time of the beginning
	StepPerod uint64     `protobuf:"varint,2,opt,name=stepPerod,proto3" json:"stepPerod,omitempty"` // time interval
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`            // application name
	Hits      []*Hit     `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
}

func (x *TrafficRes) Reset() {
	*x = TrafficRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficRes) ProtoMessage() {}

func (x *TrafficRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficRes.ProtoReflect.Descriptor instead.
func (*TrafficRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{49}
}

func (x *TrafficRes) GetStart() *Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TrafficRes) GetStepPerod() uint64 {
	if x != nil {
		return x.StepPerod
	}
	return 0
}

func (x *TrafficRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrafficRes) GetHits() []*Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

type Latency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`               // path or domain of queries
	Latency []uint64 `protobuf:"varint,2,rep,packed,name=latency,proto3" json:"latency,omitempty"` // average latency in one-step of the time interval
}

func (x *Latency) Reset() {
	*x = Latency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Latency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Latency) ProtoMessage() {}

func (x *Latency) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Latency.ProtoReflect.Descriptor instead.
func (*Latency) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{50}
}

func (x *Latency) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Latency) GetLatency() []uint64 {
	if x != nil {
		return x.Latency
	}
	return nil
}

type LatencyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     *Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`          // time of the beginning
	StepPerod uint64     `protobuf:"varint,2,opt,name=stepPerod,proto3" json:"stepPerod,omitempty"` // time interval
	Name      string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`            // application name
	Latencies []*Latency `protobuf:"bytes,4,rep,name=latencies,proto3" json:"latencies,omitempty"`
}

func (x *LatencyRes) Reset() {
	*x = LatencyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyRes) ProtoMessage() {}

func (x *LatencyRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyRes.ProtoReflect.Descriptor instead.
func (*LatencyRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{51}
}

func (x *LatencyRes) GetStart() *Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *LatencyRes) GetStepPerod() uint64 {
	if x != nil {
		return x.StepPerod
	}
	return 0
}

func (x *LatencyRes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LatencyRes) GetLatencies() []*Latency {
	if x != nil {
		return x.Latencies
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        *Timestamp  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Tag         ActivityTag `protobuf:"varint,2,opt,name=tag,proto3,enum=yb.ActivityTag" json:"tag,omitempty"`
	Name        string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Attachment  string      `protobuf:"bytes,4,opt,name=attachment,proto3" json:"attachment,omitempty"` //When tag is binding, otherwise empty
	Type        string      `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Email       string      `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Description string      `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{52}
}

func (x *Activity) GetTime() *Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Activity) GetTag() ActivityTag {
	if x != nil {
		return x.Tag
	}
	return ActivityTag_None
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetAttachment() string {
	if x != nil {
		return x.Attachment
	}
	return ""
}

func (x *Activity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Activity) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Activity) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ActivityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                 // [default = 0]
	Tag   ActivityTag `protobuf:"varint,2,opt,name=tag,proto3,enum=yb.ActivityTag" json:"tag,omitempty"` //tag for filter
	Name  string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    //name for filter
}

func (x *ActivityReq) Reset() {
	*x = ActivityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityReq) ProtoMessage() {}

func (x *ActivityReq) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityReq.ProtoReflect.Descriptor instead.
func (*ActivityReq) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{53}
}

func (x *ActivityReq) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActivityReq) GetTag() ActivityTag {
	if x != nil {
		return x.Tag
	}
	return ActivityTag_None
}

func (x *ActivityReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ActivityListRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int32       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // [default = 0]
	Activities []*Activity `protobuf:"bytes,2,rep,name=activities,proto3" json:"activities,omitempty"`
}

func (x *ActivityListRes) Reset() {
	*x = ActivityListRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_YB_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityListRes) ProtoMessage() {}

func (x *ActivityListRes) ProtoReflect() protoreflect.Message {
	mi := &file_YB_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityListRes.ProtoReflect.Descriptor instead.
func (*ActivityListRes) Descriptor() ([]byte, []int) {
	return file_YB_proto_rawDescGZIP(), []int{54}
}

func (x *ActivityListRes) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActivityListRes) GetActivities() []*Activity {
	if x != nil {
		return x.Activities
	}
	return nil
}

var File_YB_proto protoreflect.FileDescriptor

var file_YB_proto_rawDesc = []byte{
	0x0a, 0x08, 0x59, 0x42, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79, 0x62, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x62, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x62, 0x69, 0x12, 0x38, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0x51, 0x0a,
	0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x0a, 0x08, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x34,
	0x0a, 0x0a, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x22, 0x1f, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x22, 0x6c, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x76, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x76, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x22,
	0x3b, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x10,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x54, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x22, 0x54, 0x0a, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x22, 0x80, 0x01, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x39, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x5f,
	0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x4a, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0x54, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x49, 0x6d, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x48, 0x0a, 0x0a, 0x49, 0x6d, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6d, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x49, 0x6d,
	0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4a, 0x0a, 0x0a, 0x50, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x0f,
	0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x2c,
	0x0a, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x78, 0x74, 0x72, 0x61, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x04, 0x0a, 0x0c, 0x53, 0x72, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x63, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x63, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x6f,
	0x12, 0x3d, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a,
	0x51, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e,
	0x0a, 0x0a, 0x53, 0x72, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x80,
	0x01, 0x0a, 0x12, 0x53, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x53, 0x72, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x34, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x72, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x04,
	0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x63, 0x61, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x63, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x51, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6b, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0xa7,
	0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x0b, 0x54, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x3c, 0x0a, 0x08, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xbf, 0x01,
	0x0a, 0x1c, 0x41, 0x70, 0x70, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x64,
	0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3d, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x53, 0x72, 0x76, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8b,
	0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72,
	0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61,
	0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x22, 0x2b, 0x0a, 0x03,
	0x48, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x68, 0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x50, 0x65, 0x72, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x04, 0x68, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x07,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x65,
	0x70, 0x50, 0x65, 0x72, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x65, 0x70, 0x50, 0x65, 0x72, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x0b, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2a, 0xd4, 0x01, 0x0a,
	0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x67, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x53, 0x72,
	0x76, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x44, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x70, 0x70, 0x56, 0x6f, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x10, 0x0c, 0x32, 0xcd, 0x24, 0x0a, 0x02, 0x59, 0x42, 0x12, 0x48, 0x0a, 0x05, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x09,
	0x2e, 0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x09, 0x2e,
	0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f,
	0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0b, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x32, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x09, 0x2e, 0x79, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x62, 0x0a, 0x11, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x0e,
	0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x65, 0x73, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x62, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x32, 0x2f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x2f, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x59, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x43,
	0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x79,
	0x62, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x79,
	0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0x13, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76,
	0x32, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x5b, 0x0a, 0x0f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54,
	0x4c, 0x53, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f,
	0x76, 0x32, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2d, 0x74, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4f, 0x0a, 0x0c,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x79,
	0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x46, 0x0a,
	0x0c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12,
	0x2f, 0x76, 0x32, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2d,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4f, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x79, 0x62, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x46, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x2f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x3a,
	0x0a, 0x14, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x54, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x49, 0x6d,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6d, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x76, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x49, 0x6d, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6d, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x32,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x09,
	0x49, 0x6d, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x6d, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f,
	0x76, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x43, 0x0a, 0x08, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x2a, 0x0a, 0x0b, 0x49, 0x6d, 0x67, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x49, 0x6d, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x4c, 0x6f, 0x67, 0x54, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32,
	0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x5f, 0x6c,
	0x6f, 0x67, 0x2f, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x79, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x50, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x0e,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x3e, 0x0a, 0x07, 0x53, 0x72,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x53, 0x72,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x47, 0x0a, 0x09, 0x53, 0x72, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x72,
	0x76, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4d, 0x0a,
	0x08, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4b, 0x0a, 0x07,
	0x53, 0x72, 0x76, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x18, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5b, 0x0a, 0x0f, 0x53, 0x72, 0x76,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0f, 0x53, 0x72, 0x76, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x53,
	0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x4f, 0x0a, 0x0b, 0x53,
	0x72, 0x76, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x1a, 0x10, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0e,
	0x53, 0x72, 0x76, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0c,
	0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x12, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x53,
	0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x72, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x79, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41,
	0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4b, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x45, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x25, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x67,
	0x54, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x6c, 0x6f, 0x67, 0x2f, 0x5f,
	0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x59, 0x0a, 0x0c, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x72, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x55, 0x6e,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x41, 0x64, 0x64, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x78, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x55, 0x6e, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22,
	0x2d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x51, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x4f, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x12,
	0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x10, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x51, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x46, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x12, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x09, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x3a, 0x01, 0x2a,
	0x12, 0x58, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0f, 0x41, 0x70,
	0x70, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x2e,
	0x79, 0x62, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2f, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12,
	0x5f, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x72, 0x76, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x0a, 0x41, 0x70, 0x70,
	0x53, 0x72, 0x76, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x72, 0x76, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x23, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x01,
	0x2a, 0x12, 0x60, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x72, 0x76, 0x55, 0x6e, 0x42, 0x69, 0x6e,
	0x64, 0x12, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x72, 0x76, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x3a, 0x01, 0x2a, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x79, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_YB_proto_rawDescOnce sync.Once
	file_YB_proto_rawDescData = file_YB_proto_rawDesc
)

func file_YB_proto_rawDescGZIP() []byte {
	file_YB_proto_rawDescOnce.Do(func() {
		file_YB_proto_rawDescData = protoimpl.X.CompressGZIP(file_YB_proto_rawDescData)
	})
	return file_YB_proto_rawDescData
}

var file_YB_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_YB_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_YB_proto_goTypes = []interface{}{
	(ActivityTag)(0),                     // 0: yb.ActivityTag
	(*LoginReq)(nil),                     // 1: yb.LoginReq
	(*AuthenticationRes)(nil),            // 2: yb.AuthenticationRes
	(*Account)(nil),                      // 3: yb.Account
	(*Empty)(nil),                        // 4: yb.Empty
	(*Identity)(nil),                     // 5: yb.Identity
	(*Timestamp)(nil),                    // 6: yb.Timestamp
	(*GeneralVariable)(nil),              // 7: yb.GeneralVariable
	(*AttachIdentity)(nil),               // 8: yb.AttachIdentity
	(*AppListReq)(nil),                   // 9: yb.AppListReq
	(*ListReq)(nil),                      // 10: yb.ListReq
	(*ListStatusRes)(nil),                // 11: yb.ListStatusRes
	(*Chunk)(nil),                        // 12: yb.Chunk
	(*PortforwardRes)(nil),               // 13: yb.PortforwardRes
	(*DomainCreateReq)(nil),              // 14: yb.DomainCreateReq
	(*DomainAttachedTo)(nil),             // 15: yb.DomainAttachedTo
	(*DomainStatusRes)(nil),              // 16: yb.DomainStatusRes
	(*DomainListRes)(nil),                // 17: yb.DomainListRes
	(*AttachedDomainInfo)(nil),           // 18: yb.AttachedDomainInfo
	(*VolumeCreateReq)(nil),              // 19: yb.VolumeCreateReq
	(*VolumeMount)(nil),                  // 20: yb.VolumeMount
	(*VolumeSpec)(nil),                   // 21: yb.VolumeSpec
	(*VolumeSpecListRes)(nil),            // 22: yb.VolumeSpecListRes
	(*VolumeStatusRes)(nil),              // 23: yb.VolumeStatusRes
	(*VolumeListRes)(nil),                // 24: yb.VolumeListRes
	(*ImgStatusRes)(nil),                 // 25: yb.ImgStatusRes
	(*ImgListRes)(nil),                   // 26: yb.ImgListRes
	(*ImgBuildReq)(nil),                  // 27: yb.ImgBuildReq
	(*ServiceCondition)(nil),             // 28: yb.ServiceCondition
	(*ProductRes)(nil),                   // 29: yb.ProductRes
	(*ProductListRow)(nil),               // 30: yb.ProductListRow
	(*PrdListRes)(nil),                   // 31: yb.PrdListRes
	(*SrvConfigSetReq)(nil),              // 32: yb.SrvConfigSetReq
	(*Plan)(nil),                         // 33: yb.Plan
	(*SrvStatusRes)(nil),                 // 34: yb.SrvStatusRes
	(*PunchedCard)(nil),                  // 35: yb.PunchedCard
	(*ServiceRes)(nil),                   // 36: yb.ServiceRes
	(*SrvListRes)(nil),                   // 37: yb.SrvListRes
	(*SrvDomainAttachReq)(nil),           // 38: yb.SrvDomainAttachReq
	(*SrvCreateReq)(nil),                 // 39: yb.SrvCreateReq
	(*AppStatusRes)(nil),                 // 40: yb.AppStatusRes
	(*Instance)(nil),                     // 41: yb.Instance
	(*AppCreateReq)(nil),                 // 42: yb.AppCreateReq
	(*TailRequest)(nil),                  // 43: yb.TailRequest
	(*ShellReq)(nil),                     // 44: yb.ShellReq
	(*UnsetReq)(nil),                     // 45: yb.UnsetReq
	(*AppAddEnvironmentVariableReq)(nil), // 46: yb.AppAddEnvironmentVariableReq
	(*AppSrvBindReq)(nil),                // 47: yb.AppSrvBindReq
	(*ResourcesRes)(nil),                 // 48: yb.ResourcesRes
	(*Hit)(nil),                          // 49: yb.Hit
	(*TrafficRes)(nil),                   // 50: yb.TrafficRes
	(*Latency)(nil),                      // 51: yb.Latency
	(*LatencyRes)(nil),                   // 52: yb.LatencyRes
	(*Activity)(nil),                     // 53: yb.Activity
	(*ActivityReq)(nil),                  // 54: yb.ActivityReq
	(*ActivityListRes)(nil),              // 55: yb.ActivityListRes
	nil,                                  // 56: yb.Account.VariablesEntry
	nil,                                  // 57: yb.ProductRes.VariablesEntry
	nil,                                  // 58: yb.SrvConfigSetReq.ValuesEntry
	nil,                                  // 59: yb.Plan.ExtrasEntry
	nil,                                  // 60: yb.SrvStatusRes.VariablesEntry
	nil,                                  // 61: yb.PunchedCard.ValuesEntry
	nil,                                  // 62: yb.SrvCreateReq.ValuesEntry
	nil,                                  // 63: yb.AppStatusRes.VariablesEntry
	nil,                                  // 64: yb.AppStatusRes.EnvironmentVariablesEntry
	nil,                                  // 65: yb.AppCreateReq.ValuesEntry
	nil,                                  // 66: yb.AppAddEnvironmentVariableReq.VariablesEntry
}
var file_YB_proto_depIdxs = []int32{
	56,  // 0: yb.Account.variables:type_name -> yb.Account.VariablesEntry
	6,   // 1: yb.DomainStatusRes.created:type_name -> yb.Timestamp
	6,   // 2: yb.DomainStatusRes.updated:type_name -> yb.Timestamp
	15,  // 3: yb.DomainStatusRes.attachedTo:type_name -> yb.DomainAttachedTo
	16,  // 4: yb.DomainListRes.domains:type_name -> yb.DomainStatusRes
	21,  // 5: yb.VolumeSpecListRes.volumeSpecs:type_name -> yb.VolumeSpec
	6,   // 6: yb.VolumeStatusRes.created:type_name -> yb.Timestamp
	6,   // 7: yb.VolumeStatusRes.updated:type_name -> yb.Timestamp
	21,  // 8: yb.VolumeStatusRes.spec:type_name -> yb.VolumeSpec
	20,  // 9: yb.VolumeStatusRes.mounts:type_name -> yb.VolumeMount
	23,  // 10: yb.VolumeListRes.volumes:type_name -> yb.VolumeStatusRes
	6,   // 11: yb.ImgStatusRes.created:type_name -> yb.Timestamp
	6,   // 12: yb.ImgStatusRes.updated:type_name -> yb.Timestamp
	25,  // 13: yb.ImgListRes.imgs:type_name -> yb.ImgStatusRes
	6,   // 14: yb.ServiceCondition.time:type_name -> yb.Timestamp
	33,  // 15: yb.ProductRes.plan:type_name -> yb.Plan
	57,  // 16: yb.ProductRes.variables:type_name -> yb.ProductRes.VariablesEntry
	30,  // 17: yb.PrdListRes.rows:type_name -> yb.ProductListRow
	58,  // 18: yb.SrvConfigSetReq.values:type_name -> yb.SrvConfigSetReq.ValuesEntry
	59,  // 19: yb.Plan.extras:type_name -> yb.Plan.ExtrasEntry
	6,   // 20: yb.SrvStatusRes.created:type_name -> yb.Timestamp
	6,   // 21: yb.SrvStatusRes.updated:type_name -> yb.Timestamp
	28,  // 22: yb.SrvStatusRes.conditions:type_name -> yb.ServiceCondition
	18,  // 23: yb.SrvStatusRes.domains:type_name -> yb.AttachedDomainInfo
	60,  // 24: yb.SrvStatusRes.variables:type_name -> yb.SrvStatusRes.VariablesEntry
	61,  // 25: yb.PunchedCard.values:type_name -> yb.PunchedCard.ValuesEntry
	6,   // 26: yb.ServiceRes.updated:type_name -> yb.Timestamp
	28,  // 27: yb.ServiceRes.condition:type_name -> yb.ServiceCondition
	36,  // 28: yb.SrvListRes.services:type_name -> yb.ServiceRes
	8,   // 29: yb.SrvDomainAttachReq.attachIdentity:type_name -> yb.AttachIdentity
	62,  // 30: yb.SrvCreateReq.values:type_name -> yb.SrvCreateReq.ValuesEntry
	6,   // 31: yb.AppStatusRes.created:type_name -> yb.Timestamp
	6,   // 32: yb.AppStatusRes.updated:type_name -> yb.Timestamp
	63,  // 33: yb.AppStatusRes.variables:type_name -> yb.AppStatusRes.VariablesEntry
	64,  // 34: yb.AppStatusRes.environmentVariables:type_name -> yb.AppStatusRes.EnvironmentVariablesEntry
	41,  // 35: yb.AppStatusRes.instances:type_name -> yb.Instance
	28,  // 36: yb.AppStatusRes.conditions:type_name -> yb.ServiceCondition
	6,   // 37: yb.Instance.created:type_name -> yb.Timestamp
	65,  // 38: yb.AppCreateReq.values:type_name -> yb.AppCreateReq.ValuesEntry
	66,  // 39: yb.AppAddEnvironmentVariableReq.variables:type_name -> yb.AppAddEnvironmentVariableReq.VariablesEntry
	6,   // 40: yb.ResourcesRes.start:type_name -> yb.Timestamp
	6,   // 41: yb.TrafficRes.start:type_name -> yb.Timestamp
	49,  // 42: yb.TrafficRes.hits:type_name -> yb.Hit
	6,   // 43: yb.LatencyRes.start:type_name -> yb.Timestamp
	51,  // 44: yb.LatencyRes.latencies:type_name -> yb.Latency
	6,   // 45: yb.Activity.time:type_name -> yb.Timestamp
	0,   // 46: yb.Activity.tag:type_name -> yb.ActivityTag
	0,   // 47: yb.ActivityReq.tag:type_name -> yb.ActivityTag
	53,  // 48: yb.ActivityListRes.activities:type_name -> yb.Activity
	7,   // 49: yb.Account.VariablesEntry.value:type_name -> yb.GeneralVariable
	7,   // 50: yb.ProductRes.VariablesEntry.value:type_name -> yb.GeneralVariable
	7,   // 51: yb.SrvStatusRes.VariablesEntry.value:type_name -> yb.GeneralVariable
	7,   // 52: yb.AppStatusRes.VariablesEntry.value:type_name -> yb.GeneralVariable
	1,   // 53: yb.YB.Login:input_type -> yb.LoginReq
	4,   // 54: yb.YB.Logout:input_type -> yb.Empty
	4,   // 55: yb.YB.AccountInfo:input_type -> yb.Empty
	3,   // 56: yb.YB.AccountUpdate:input_type -> yb.Account
	4,   // 57: yb.YB.MonitoringQuota:input_type -> yb.Empty
	5,   // 58: yb.YB.MonitoringResource:input_type -> yb.Identity
	5,   // 59: yb.YB.MonitoringTraffic:input_type -> yb.Identity
	5,   // 60: yb.YB.MonitoringLatency:input_type -> yb.Identity
	54,  // 61: yb.YB.ActivityList:input_type -> yb.ActivityReq
	9,   // 62: yb.YB.DomainList:input_type -> yb.AppListReq
	5,   // 63: yb.YB.DomainInfo:input_type -> yb.Identity
	5,   // 64: yb.YB.DomainToggleTLS:input_type -> yb.Identity
	14,  // 65: yb.YB.DomainCreate:input_type -> yb.DomainCreateReq
	5,   // 66: yb.YB.DomainDelete:input_type -> yb.Identity
	10,  // 67: yb.YB.VolumeSpecList:input_type -> yb.ListReq
	9,   // 68: yb.YB.VolumeList:input_type -> yb.AppListReq
	5,   // 69: yb.YB.VolumeInfo:input_type -> yb.Identity
	19,  // 70: yb.YB.VolumeCreate:input_type -> yb.VolumeCreateReq
	5,   // 71: yb.YB.VolumeDelete:input_type -> yb.Identity
	5,   // 72: yb.YB.VolumeFTPPortforward:input_type -> yb.Identity
	9,   // 73: yb.YB.ImgList:input_type -> yb.AppListReq
	5,   // 74: yb.YB.ImgInfo:input_type -> yb.Identity
	27,  // 75: yb.YB.ImgDelete:input_type -> yb.ImgBuildReq
	27,  // 76: yb.YB.ImgBuild:input_type -> yb.ImgBuildReq
	5,   // 77: yb.YB.ImgBuildLog:input_type -> yb.Identity
	43,  // 78: yb.YB.ImgBuildLogTail:input_type -> yb.TailRequest
	10,  // 79: yb.YB.PrdList:input_type -> yb.ListReq
	5,   // 80: yb.YB.PrdInfo:input_type -> yb.Identity
	9,   // 81: yb.YB.SrvList:input_type -> yb.AppListReq
	5,   // 82: yb.YB.SrvInfo:input_type -> yb.Identity
	39,  // 83: yb.YB.SrvCreate:input_type -> yb.SrvCreateReq
	5,   // 84: yb.YB.SrvDestroy:input_type -> yb.Identity
	5,   // 85: yb.YB.SrvStart:input_type -> yb.Identity
	5,   // 86: yb.YB.SrvStop:input_type -> yb.Identity
	38,  // 87: yb.YB.SrvAttachDomain:input_type -> yb.SrvDomainAttachReq
	38,  // 88: yb.YB.SrvDetachDomain:input_type -> yb.SrvDomainAttachReq
	35,  // 89: yb.YB.SrvOperator:input_type -> yb.PunchedCard
	5,   // 90: yb.YB.SrvPortforward:input_type -> yb.Identity
	32,  // 91: yb.YB.SrvConfigSet:input_type -> yb.SrvConfigSetReq
	45,  // 92: yb.YB.SrvConfigUnset:input_type -> yb.UnsetReq
	10,  // 93: yb.YB.AppList:input_type -> yb.ListReq
	5,   // 94: yb.YB.AppInfo:input_type -> yb.Identity
	42,  // 95: yb.YB.AppCreate:input_type -> yb.AppCreateReq
	5,   // 96: yb.YB.AppDestroy:input_type -> yb.Identity
	5,   // 97: yb.YB.AppLog:input_type -> yb.Identity
	43,  // 98: yb.YB.AppLogTail:input_type -> yb.TailRequest
	32,  // 99: yb.YB.AppConfigSet:input_type -> yb.SrvConfigSetReq
	45,  // 100: yb.YB.AppConfigUnset:input_type -> yb.UnsetReq
	46,  // 101: yb.YB.AppAddEnvironmentVariable:input_type -> yb.AppAddEnvironmentVariableReq
	45,  // 102: yb.YB.AppRemoveEnvironmentVariable:input_type -> yb.UnsetReq
	5,   // 103: yb.YB.AppReset:input_type -> yb.Identity
	5,   // 104: yb.YB.AppStop:input_type -> yb.Identity
	5,   // 105: yb.YB.AppStart:input_type -> yb.Identity
	44,  // 106: yb.YB.AppShell:input_type -> yb.ShellReq
	20,  // 107: yb.YB.AppAttachVolume:input_type -> yb.VolumeMount
	8,   // 108: yb.YB.AppDetachVolume:input_type -> yb.AttachIdentity
	38,  // 109: yb.YB.AppAttachDomain:input_type -> yb.SrvDomainAttachReq
	38,  // 110: yb.YB.AppDetachDomain:input_type -> yb.SrvDomainAttachReq
	47,  // 111: yb.YB.AppSrvBind:input_type -> yb.AppSrvBindReq
	47,  // 112: yb.YB.AppSrvUnBind:input_type -> yb.AppSrvBindReq
	2,   // 113: yb.YB.Login:output_type -> yb.AuthenticationRes
	4,   // 114: yb.YB.Logout:output_type -> yb.Empty
	3,   // 115: yb.YB.AccountInfo:output_type -> yb.Account
	3,   // 116: yb.YB.AccountUpdate:output_type -> yb.Account
	48,  // 117: yb.YB.MonitoringQuota:output_type -> yb.ResourcesRes
	48,  // 118: yb.YB.MonitoringResource:output_type -> yb.ResourcesRes
	50,  // 119: yb.YB.MonitoringTraffic:output_type -> yb.TrafficRes
	52,  // 120: yb.YB.MonitoringLatency:output_type -> yb.LatencyRes
	55,  // 121: yb.YB.ActivityList:output_type -> yb.ActivityListRes
	17,  // 122: yb.YB.DomainList:output_type -> yb.DomainListRes
	16,  // 123: yb.YB.DomainInfo:output_type -> yb.DomainStatusRes
	16,  // 124: yb.YB.DomainToggleTLS:output_type -> yb.DomainStatusRes
	16,  // 125: yb.YB.DomainCreate:output_type -> yb.DomainStatusRes
	4,   // 126: yb.YB.DomainDelete:output_type -> yb.Empty
	22,  // 127: yb.YB.VolumeSpecList:output_type -> yb.VolumeSpecListRes
	24,  // 128: yb.YB.VolumeList:output_type -> yb.VolumeListRes
	23,  // 129: yb.YB.VolumeInfo:output_type -> yb.VolumeStatusRes
	23,  // 130: yb.YB.VolumeCreate:output_type -> yb.VolumeStatusRes
	4,   // 131: yb.YB.VolumeDelete:output_type -> yb.Empty
	13,  // 132: yb.YB.VolumeFTPPortforward:output_type -> yb.PortforwardRes
	26,  // 133: yb.YB.ImgList:output_type -> yb.ImgListRes
	25,  // 134: yb.YB.ImgInfo:output_type -> yb.ImgStatusRes
	4,   // 135: yb.YB.ImgDelete:output_type -> yb.Empty
	4,   // 136: yb.YB.ImgBuild:output_type -> yb.Empty
	12,  // 137: yb.YB.ImgBuildLog:output_type -> yb.Chunk
	12,  // 138: yb.YB.ImgBuildLogTail:output_type -> yb.Chunk
	31,  // 139: yb.YB.PrdList:output_type -> yb.PrdListRes
	29,  // 140: yb.YB.PrdInfo:output_type -> yb.ProductRes
	37,  // 141: yb.YB.SrvList:output_type -> yb.SrvListRes
	34,  // 142: yb.YB.SrvInfo:output_type -> yb.SrvStatusRes
	34,  // 143: yb.YB.SrvCreate:output_type -> yb.SrvStatusRes
	4,   // 144: yb.YB.SrvDestroy:output_type -> yb.Empty
	34,  // 145: yb.YB.SrvStart:output_type -> yb.SrvStatusRes
	34,  // 146: yb.YB.SrvStop:output_type -> yb.SrvStatusRes
	34,  // 147: yb.YB.SrvAttachDomain:output_type -> yb.SrvStatusRes
	34,  // 148: yb.YB.SrvDetachDomain:output_type -> yb.SrvStatusRes
	34,  // 149: yb.YB.SrvOperator:output_type -> yb.SrvStatusRes
	13,  // 150: yb.YB.SrvPortforward:output_type -> yb.PortforwardRes
	34,  // 151: yb.YB.SrvConfigSet:output_type -> yb.SrvStatusRes
	34,  // 152: yb.YB.SrvConfigUnset:output_type -> yb.SrvStatusRes
	37,  // 153: yb.YB.AppList:output_type -> yb.SrvListRes
	40,  // 154: yb.YB.AppInfo:output_type -> yb.AppStatusRes
	40,  // 155: yb.YB.AppCreate:output_type -> yb.AppStatusRes
	4,   // 156: yb.YB.AppDestroy:output_type -> yb.Empty
	12,  // 157: yb.YB.AppLog:output_type -> yb.Chunk
	12,  // 158: yb.YB.AppLogTail:output_type -> yb.Chunk
	40,  // 159: yb.YB.AppConfigSet:output_type -> yb.AppStatusRes
	40,  // 160: yb.YB.AppConfigUnset:output_type -> yb.AppStatusRes
	40,  // 161: yb.YB.AppAddEnvironmentVariable:output_type -> yb.AppStatusRes
	40,  // 162: yb.YB.AppRemoveEnvironmentVariable:output_type -> yb.AppStatusRes
	40,  // 163: yb.YB.AppReset:output_type -> yb.AppStatusRes
	40,  // 164: yb.YB.AppStop:output_type -> yb.AppStatusRes
	40,  // 165: yb.YB.AppStart:output_type -> yb.AppStatusRes
	12,  // 166: yb.YB.AppShell:output_type -> yb.Chunk
	40,  // 167: yb.YB.AppAttachVolume:output_type -> yb.AppStatusRes
	40,  // 168: yb.YB.AppDetachVolume:output_type -> yb.AppStatusRes
	40,  // 169: yb.YB.AppAttachDomain:output_type -> yb.AppStatusRes
	40,  // 170: yb.YB.AppDetachDomain:output_type -> yb.AppStatusRes
	40,  // 171: yb.YB.AppSrvBind:output_type -> yb.AppStatusRes
	40,  // 172: yb.YB.AppSrvUnBind:output_type -> yb.AppStatusRes
	113, // [113:173] is the sub-list for method output_type
	53,  // [53:113] is the sub-list for method input_type
	53,  // [53:53] is the sub-list for extension type_name
	53,  // [53:53] is the sub-list for extension extendee
	0,   // [0:53] is the sub-list for field type_name
}

func init() { file_YB_proto_init() }
func file_YB_proto_init() {
	if File_YB_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_YB_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortforwardRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainAttachedTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedDomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeSpecListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImgBuildReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductListRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrdListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrvConfigSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrvStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PunchedCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrvListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrvDomainAttachReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SrvCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppStatusRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppAddEnvironmentVariableReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppSrvBindReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcesRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Latency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_YB_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityListRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_YB_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_YB_proto_goTypes,
		DependencyIndexes: file_YB_proto_depIdxs,
		EnumInfos:         file_YB_proto_enumTypes,
		MessageInfos:      file_YB_proto_msgTypes,
	}.Build()
	File_YB_proto = out.File
	file_YB_proto_rawDesc = nil
	file_YB_proto_goTypes = nil
	file_YB_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// YBClient is the client API for YB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type YBClient interface {
	// Authentication
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*AuthenticationRes, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AccountInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Account, error)
	AccountUpdate(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	// Monitoring
	MonitoringQuota(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResourcesRes, error)
	MonitoringResource(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ResourcesRes, error)
	MonitoringTraffic(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*TrafficRes, error)
	MonitoringLatency(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*LatencyRes, error)
	ActivityList(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*ActivityListRes, error)
	// Domain
	DomainList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*DomainListRes, error)
	DomainInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*DomainStatusRes, error)
	DomainToggleTLS(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*DomainStatusRes, error)
	DomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DomainStatusRes, error)
	DomainDelete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	// Volume
	VolumeSpecList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*VolumeSpecListRes, error)
	VolumeList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*VolumeListRes, error)
	VolumeInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*VolumeStatusRes, error)
	VolumeCreate(ctx context.Context, in *VolumeCreateReq, opts ...grpc.CallOption) (*VolumeStatusRes, error)
	VolumeDelete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	VolumeFTPPortforward(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*PortforwardRes, error)
	// Image
	ImgList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*ImgListRes, error)
	ImgInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ImgStatusRes, error)
	ImgDelete(ctx context.Context, in *ImgBuildReq, opts ...grpc.CallOption) (*Empty, error)
	ImgBuild(ctx context.Context, in *ImgBuildReq, opts ...grpc.CallOption) (*Empty, error)
	ImgBuildLog(ctx context.Context, in *Identity, opts ...grpc.CallOption) (YB_ImgBuildLogClient, error)
	ImgBuildLogTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*Chunk, error)
	// Product
	PrdList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PrdListRes, error)
	PrdInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ProductRes, error)
	// Service
	SrvList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*SrvListRes, error)
	SrvInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvCreate(ctx context.Context, in *SrvCreateReq, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvDestroy(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	SrvStart(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvStop(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvAttachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvDetachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvOperator(ctx context.Context, in *PunchedCard, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvPortforward(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*PortforwardRes, error)
	//Added in v2.1 patch
	SrvConfigSet(ctx context.Context, in *SrvConfigSetReq, opts ...grpc.CallOption) (*SrvStatusRes, error)
	SrvConfigUnset(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*SrvStatusRes, error)
	// Application
	AppList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*SrvListRes, error)
	AppInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppCreate(ctx context.Context, in *AppCreateReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppDestroy(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	AppLog(ctx context.Context, in *Identity, opts ...grpc.CallOption) (YB_AppLogClient, error)
	AppLogTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*Chunk, error)
	AppConfigSet(ctx context.Context, in *SrvConfigSetReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppConfigUnset(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppAddEnvironmentVariable(ctx context.Context, in *AppAddEnvironmentVariableReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppRemoveEnvironmentVariable(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppReset(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppStop(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppStart(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error)
	//TTY disable for now
	AppShell(ctx context.Context, in *ShellReq, opts ...grpc.CallOption) (*Chunk, error)
	AppAttachVolume(ctx context.Context, in *VolumeMount, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppDetachVolume(ctx context.Context, in *AttachIdentity, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppAttachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppDetachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppSrvBind(ctx context.Context, in *AppSrvBindReq, opts ...grpc.CallOption) (*AppStatusRes, error)
	AppSrvUnBind(ctx context.Context, in *AppSrvBindReq, opts ...grpc.CallOption) (*AppStatusRes, error)
}

type yBClient struct {
	cc grpc.ClientConnInterface
}

func NewYBClient(cc grpc.ClientConnInterface) YBClient {
	return &yBClient{cc}
}

func (c *yBClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*AuthenticationRes, error) {
	out := new(AuthenticationRes)
	err := c.cc.Invoke(ctx, "/yb.YB/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AccountInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/yb.YB/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AccountUpdate(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/yb.YB/AccountUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) MonitoringQuota(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResourcesRes, error) {
	out := new(ResourcesRes)
	err := c.cc.Invoke(ctx, "/yb.YB/MonitoringQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) MonitoringResource(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ResourcesRes, error) {
	out := new(ResourcesRes)
	err := c.cc.Invoke(ctx, "/yb.YB/MonitoringResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) MonitoringTraffic(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*TrafficRes, error) {
	out := new(TrafficRes)
	err := c.cc.Invoke(ctx, "/yb.YB/MonitoringTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) MonitoringLatency(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*LatencyRes, error) {
	out := new(LatencyRes)
	err := c.cc.Invoke(ctx, "/yb.YB/MonitoringLatency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ActivityList(ctx context.Context, in *ActivityReq, opts ...grpc.CallOption) (*ActivityListRes, error) {
	out := new(ActivityListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/ActivityList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) DomainList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*DomainListRes, error) {
	out := new(DomainListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/DomainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) DomainInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*DomainStatusRes, error) {
	out := new(DomainStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/DomainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) DomainToggleTLS(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*DomainStatusRes, error) {
	out := new(DomainStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/DomainToggleTLS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) DomainCreate(ctx context.Context, in *DomainCreateReq, opts ...grpc.CallOption) (*DomainStatusRes, error) {
	out := new(DomainStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/DomainCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) DomainDelete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/DomainDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeSpecList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*VolumeSpecListRes, error) {
	out := new(VolumeSpecListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeSpecList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*VolumeListRes, error) {
	out := new(VolumeListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*VolumeStatusRes, error) {
	out := new(VolumeStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeCreate(ctx context.Context, in *VolumeCreateReq, opts ...grpc.CallOption) (*VolumeStatusRes, error) {
	out := new(VolumeStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeDelete(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) VolumeFTPPortforward(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*PortforwardRes, error) {
	out := new(PortforwardRes)
	err := c.cc.Invoke(ctx, "/yb.YB/VolumeFTPPortforward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ImgList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*ImgListRes, error) {
	out := new(ImgListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/ImgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ImgInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ImgStatusRes, error) {
	out := new(ImgStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/ImgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ImgDelete(ctx context.Context, in *ImgBuildReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/ImgDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ImgBuild(ctx context.Context, in *ImgBuildReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/ImgBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) ImgBuildLog(ctx context.Context, in *Identity, opts ...grpc.CallOption) (YB_ImgBuildLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YB_serviceDesc.Streams[0], "/yb.YB/ImgBuildLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &yBImgBuildLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YB_ImgBuildLogClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type yBImgBuildLogClient struct {
	grpc.ClientStream
}

func (x *yBImgBuildLogClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yBClient) ImgBuildLogTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/yb.YB/ImgBuildLogTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) PrdList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*PrdListRes, error) {
	out := new(PrdListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/PrdList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) PrdInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ProductRes, error) {
	out := new(ProductRes)
	err := c.cc.Invoke(ctx, "/yb.YB/PrdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvList(ctx context.Context, in *AppListReq, opts ...grpc.CallOption) (*SrvListRes, error) {
	out := new(SrvListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvCreate(ctx context.Context, in *SrvCreateReq, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvDestroy(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvStart(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvStop(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvAttachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvAttachDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvDetachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvDetachDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvOperator(ctx context.Context, in *PunchedCard, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvPortforward(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*PortforwardRes, error) {
	out := new(PortforwardRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvPortforward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvConfigSet(ctx context.Context, in *SrvConfigSetReq, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvConfigSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) SrvConfigUnset(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*SrvStatusRes, error) {
	out := new(SrvStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/SrvConfigUnset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppList(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*SrvListRes, error) {
	out := new(SrvListRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppInfo(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppCreate(ctx context.Context, in *AppCreateReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppDestroy(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/yb.YB/AppDestroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppLog(ctx context.Context, in *Identity, opts ...grpc.CallOption) (YB_AppLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_YB_serviceDesc.Streams[1], "/yb.YB/AppLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &yBAppLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type YB_AppLogClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type yBAppLogClient struct {
	grpc.ClientStream
}

func (x *yBAppLogClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *yBClient) AppLogTail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/yb.YB/AppLogTail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppConfigSet(ctx context.Context, in *SrvConfigSetReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppConfigSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppConfigUnset(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppConfigUnset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppAddEnvironmentVariable(ctx context.Context, in *AppAddEnvironmentVariableReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppAddEnvironmentVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppRemoveEnvironmentVariable(ctx context.Context, in *UnsetReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppRemoveEnvironmentVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppReset(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppStop(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppStart(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppShell(ctx context.Context, in *ShellReq, opts ...grpc.CallOption) (*Chunk, error) {
	out := new(Chunk)
	err := c.cc.Invoke(ctx, "/yb.YB/AppShell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppAttachVolume(ctx context.Context, in *VolumeMount, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppAttachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppDetachVolume(ctx context.Context, in *AttachIdentity, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppDetachVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppAttachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppAttachDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppDetachDomain(ctx context.Context, in *SrvDomainAttachReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppDetachDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppSrvBind(ctx context.Context, in *AppSrvBindReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppSrvBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yBClient) AppSrvUnBind(ctx context.Context, in *AppSrvBindReq, opts ...grpc.CallOption) (*AppStatusRes, error) {
	out := new(AppStatusRes)
	err := c.cc.Invoke(ctx, "/yb.YB/AppSrvUnBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YBServer is the server API for YB service.
type YBServer interface {
	// Authentication
	Login(context.Context, *LoginReq) (*AuthenticationRes, error)
	Logout(context.Context, *Empty) (*Empty, error)
	AccountInfo(context.Context, *Empty) (*Account, error)
	AccountUpdate(context.Context, *Account) (*Account, error)
	// Monitoring
	MonitoringQuota(context.Context, *Empty) (*ResourcesRes, error)
	MonitoringResource(context.Context, *Identity) (*ResourcesRes, error)
	MonitoringTraffic(context.Context, *Identity) (*TrafficRes, error)
	MonitoringLatency(context.Context, *Identity) (*LatencyRes, error)
	ActivityList(context.Context, *ActivityReq) (*ActivityListRes, error)
	// Domain
	DomainList(context.Context, *AppListReq) (*DomainListRes, error)
	DomainInfo(context.Context, *Identity) (*DomainStatusRes, error)
	DomainToggleTLS(context.Context, *Identity) (*DomainStatusRes, error)
	DomainCreate(context.Context, *DomainCreateReq) (*DomainStatusRes, error)
	DomainDelete(context.Context, *Identity) (*Empty, error)
	// Volume
	VolumeSpecList(context.Context, *ListReq) (*VolumeSpecListRes, error)
	VolumeList(context.Context, *AppListReq) (*VolumeListRes, error)
	VolumeInfo(context.Context, *Identity) (*VolumeStatusRes, error)
	VolumeCreate(context.Context, *VolumeCreateReq) (*VolumeStatusRes, error)
	VolumeDelete(context.Context, *Identity) (*Empty, error)
	VolumeFTPPortforward(context.Context, *Identity) (*PortforwardRes, error)
	// Image
	ImgList(context.Context, *AppListReq) (*ImgListRes, error)
	ImgInfo(context.Context, *Identity) (*ImgStatusRes, error)
	ImgDelete(context.Context, *ImgBuildReq) (*Empty, error)
	ImgBuild(context.Context, *ImgBuildReq) (*Empty, error)
	ImgBuildLog(*Identity, YB_ImgBuildLogServer) error
	ImgBuildLogTail(context.Context, *TailRequest) (*Chunk, error)
	// Product
	PrdList(context.Context, *ListReq) (*PrdListRes, error)
	PrdInfo(context.Context, *Identity) (*ProductRes, error)
	// Service
	SrvList(context.Context, *AppListReq) (*SrvListRes, error)
	SrvInfo(context.Context, *Identity) (*SrvStatusRes, error)
	SrvCreate(context.Context, *SrvCreateReq) (*SrvStatusRes, error)
	SrvDestroy(context.Context, *Identity) (*Empty, error)
	SrvStart(context.Context, *Identity) (*SrvStatusRes, error)
	SrvStop(context.Context, *Identity) (*SrvStatusRes, error)
	SrvAttachDomain(context.Context, *SrvDomainAttachReq) (*SrvStatusRes, error)
	SrvDetachDomain(context.Context, *SrvDomainAttachReq) (*SrvStatusRes, error)
	SrvOperator(context.Context, *PunchedCard) (*SrvStatusRes, error)
	SrvPortforward(context.Context, *Identity) (*PortforwardRes, error)
	//Added in v2.1 patch
	SrvConfigSet(context.Context, *SrvConfigSetReq) (*SrvStatusRes, error)
	SrvConfigUnset(context.Context, *UnsetReq) (*SrvStatusRes, error)
	// Application
	AppList(context.Context, *ListReq) (*SrvListRes, error)
	AppInfo(context.Context, *Identity) (*AppStatusRes, error)
	AppCreate(context.Context, *AppCreateReq) (*AppStatusRes, error)
	AppDestroy(context.Context, *Identity) (*Empty, error)
	AppLog(*Identity, YB_AppLogServer) error
	AppLogTail(context.Context, *TailRequest) (*Chunk, error)
	AppConfigSet(context.Context, *SrvConfigSetReq) (*AppStatusRes, error)
	AppConfigUnset(context.Context, *UnsetReq) (*AppStatusRes, error)
	AppAddEnvironmentVariable(context.Context, *AppAddEnvironmentVariableReq) (*AppStatusRes, error)
	AppRemoveEnvironmentVariable(context.Context, *UnsetReq) (*AppStatusRes, error)
	AppReset(context.Context, *Identity) (*AppStatusRes, error)
	AppStop(context.Context, *Identity) (*AppStatusRes, error)
	AppStart(context.Context, *Identity) (*AppStatusRes, error)
	//TTY disable for now
	AppShell(context.Context, *ShellReq) (*Chunk, error)
	AppAttachVolume(context.Context, *VolumeMount) (*AppStatusRes, error)
	AppDetachVolume(context.Context, *AttachIdentity) (*AppStatusRes, error)
	AppAttachDomain(context.Context, *SrvDomainAttachReq) (*AppStatusRes, error)
	AppDetachDomain(context.Context, *SrvDomainAttachReq) (*AppStatusRes, error)
	AppSrvBind(context.Context, *AppSrvBindReq) (*AppStatusRes, error)
	AppSrvUnBind(context.Context, *AppSrvBindReq) (*AppStatusRes, error)
}

// UnimplementedYBServer can be embedded to have forward compatible implementations.
type UnimplementedYBServer struct {
}

func (*UnimplementedYBServer) Login(context.Context, *LoginReq) (*AuthenticationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedYBServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedYBServer) AccountInfo(context.Context, *Empty) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (*UnimplementedYBServer) AccountUpdate(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdate not implemented")
}
func (*UnimplementedYBServer) MonitoringQuota(context.Context, *Empty) (*ResourcesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitoringQuota not implemented")
}
func (*UnimplementedYBServer) MonitoringResource(context.Context, *Identity) (*ResourcesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitoringResource not implemented")
}
func (*UnimplementedYBServer) MonitoringTraffic(context.Context, *Identity) (*TrafficRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitoringTraffic not implemented")
}
func (*UnimplementedYBServer) MonitoringLatency(context.Context, *Identity) (*LatencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitoringLatency not implemented")
}
func (*UnimplementedYBServer) ActivityList(context.Context, *ActivityReq) (*ActivityListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivityList not implemented")
}
func (*UnimplementedYBServer) DomainList(context.Context, *AppListReq) (*DomainListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainList not implemented")
}
func (*UnimplementedYBServer) DomainInfo(context.Context, *Identity) (*DomainStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainInfo not implemented")
}
func (*UnimplementedYBServer) DomainToggleTLS(context.Context, *Identity) (*DomainStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainToggleTLS not implemented")
}
func (*UnimplementedYBServer) DomainCreate(context.Context, *DomainCreateReq) (*DomainStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainCreate not implemented")
}
func (*UnimplementedYBServer) DomainDelete(context.Context, *Identity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DomainDelete not implemented")
}
func (*UnimplementedYBServer) VolumeSpecList(context.Context, *ListReq) (*VolumeSpecListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeSpecList not implemented")
}
func (*UnimplementedYBServer) VolumeList(context.Context, *AppListReq) (*VolumeListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (*UnimplementedYBServer) VolumeInfo(context.Context, *Identity) (*VolumeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeInfo not implemented")
}
func (*UnimplementedYBServer) VolumeCreate(context.Context, *VolumeCreateReq) (*VolumeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCreate not implemented")
}
func (*UnimplementedYBServer) VolumeDelete(context.Context, *Identity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeDelete not implemented")
}
func (*UnimplementedYBServer) VolumeFTPPortforward(context.Context, *Identity) (*PortforwardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeFTPPortforward not implemented")
}
func (*UnimplementedYBServer) ImgList(context.Context, *AppListReq) (*ImgListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImgList not implemented")
}
func (*UnimplementedYBServer) ImgInfo(context.Context, *Identity) (*ImgStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImgInfo not implemented")
}
func (*UnimplementedYBServer) ImgDelete(context.Context, *ImgBuildReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImgDelete not implemented")
}
func (*UnimplementedYBServer) ImgBuild(context.Context, *ImgBuildReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImgBuild not implemented")
}
func (*UnimplementedYBServer) ImgBuildLog(*Identity, YB_ImgBuildLogServer) error {
	return status.Errorf(codes.Unimplemented, "method ImgBuildLog not implemented")
}
func (*UnimplementedYBServer) ImgBuildLogTail(context.Context, *TailRequest) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImgBuildLogTail not implemented")
}
func (*UnimplementedYBServer) PrdList(context.Context, *ListReq) (*PrdListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrdList not implemented")
}
func (*UnimplementedYBServer) PrdInfo(context.Context, *Identity) (*ProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrdInfo not implemented")
}
func (*UnimplementedYBServer) SrvList(context.Context, *AppListReq) (*SrvListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvList not implemented")
}
func (*UnimplementedYBServer) SrvInfo(context.Context, *Identity) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvInfo not implemented")
}
func (*UnimplementedYBServer) SrvCreate(context.Context, *SrvCreateReq) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvCreate not implemented")
}
func (*UnimplementedYBServer) SrvDestroy(context.Context, *Identity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvDestroy not implemented")
}
func (*UnimplementedYBServer) SrvStart(context.Context, *Identity) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvStart not implemented")
}
func (*UnimplementedYBServer) SrvStop(context.Context, *Identity) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvStop not implemented")
}
func (*UnimplementedYBServer) SrvAttachDomain(context.Context, *SrvDomainAttachReq) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvAttachDomain not implemented")
}
func (*UnimplementedYBServer) SrvDetachDomain(context.Context, *SrvDomainAttachReq) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvDetachDomain not implemented")
}
func (*UnimplementedYBServer) SrvOperator(context.Context, *PunchedCard) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvOperator not implemented")
}
func (*UnimplementedYBServer) SrvPortforward(context.Context, *Identity) (*PortforwardRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvPortforward not implemented")
}
func (*UnimplementedYBServer) SrvConfigSet(context.Context, *SrvConfigSetReq) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvConfigSet not implemented")
}
func (*UnimplementedYBServer) SrvConfigUnset(context.Context, *UnsetReq) (*SrvStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SrvConfigUnset not implemented")
}
func (*UnimplementedYBServer) AppList(context.Context, *ListReq) (*SrvListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppList not implemented")
}
func (*UnimplementedYBServer) AppInfo(context.Context, *Identity) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfo not implemented")
}
func (*UnimplementedYBServer) AppCreate(context.Context, *AppCreateReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppCreate not implemented")
}
func (*UnimplementedYBServer) AppDestroy(context.Context, *Identity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDestroy not implemented")
}
func (*UnimplementedYBServer) AppLog(*Identity, YB_AppLogServer) error {
	return status.Errorf(codes.Unimplemented, "method AppLog not implemented")
}
func (*UnimplementedYBServer) AppLogTail(context.Context, *TailRequest) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppLogTail not implemented")
}
func (*UnimplementedYBServer) AppConfigSet(context.Context, *SrvConfigSetReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppConfigSet not implemented")
}
func (*UnimplementedYBServer) AppConfigUnset(context.Context, *UnsetReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppConfigUnset not implemented")
}
func (*UnimplementedYBServer) AppAddEnvironmentVariable(context.Context, *AppAddEnvironmentVariableReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAddEnvironmentVariable not implemented")
}
func (*UnimplementedYBServer) AppRemoveEnvironmentVariable(context.Context, *UnsetReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppRemoveEnvironmentVariable not implemented")
}
func (*UnimplementedYBServer) AppReset(context.Context, *Identity) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppReset not implemented")
}
func (*UnimplementedYBServer) AppStop(context.Context, *Identity) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStop not implemented")
}
func (*UnimplementedYBServer) AppStart(context.Context, *Identity) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppStart not implemented")
}
func (*UnimplementedYBServer) AppShell(context.Context, *ShellReq) (*Chunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppShell not implemented")
}
func (*UnimplementedYBServer) AppAttachVolume(context.Context, *VolumeMount) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAttachVolume not implemented")
}
func (*UnimplementedYBServer) AppDetachVolume(context.Context, *AttachIdentity) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetachVolume not implemented")
}
func (*UnimplementedYBServer) AppAttachDomain(context.Context, *SrvDomainAttachReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppAttachDomain not implemented")
}
func (*UnimplementedYBServer) AppDetachDomain(context.Context, *SrvDomainAttachReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppDetachDomain not implemented")
}
func (*UnimplementedYBServer) AppSrvBind(context.Context, *AppSrvBindReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppSrvBind not implemented")
}
func (*UnimplementedYBServer) AppSrvUnBind(context.Context, *AppSrvBindReq) (*AppStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppSrvUnBind not implemented")
}

func RegisterYBServer(s *grpc.Server, srv YBServer) {
	s.RegisterService(&_YB_serviceDesc, srv)
}

func _YB_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AccountInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AccountUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AccountUpdate(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_MonitoringQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).MonitoringQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/MonitoringQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).MonitoringQuota(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_MonitoringResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).MonitoringResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/MonitoringResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).MonitoringResource(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_MonitoringTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).MonitoringTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/MonitoringTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).MonitoringTraffic(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_MonitoringLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).MonitoringLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/MonitoringLatency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).MonitoringLatency(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ActivityList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ActivityList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ActivityList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ActivityList(ctx, req.(*ActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_DomainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).DomainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/DomainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).DomainList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_DomainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).DomainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/DomainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).DomainInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_DomainToggleTLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).DomainToggleTLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/DomainToggleTLS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).DomainToggleTLS(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_DomainCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DomainCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).DomainCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/DomainCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).DomainCreate(ctx, req.(*DomainCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_DomainDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).DomainDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/DomainDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).DomainDelete(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeSpecList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeSpecList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeSpecList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeSpecList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeCreate(ctx, req.(*VolumeCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeDelete(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_VolumeFTPPortforward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).VolumeFTPPortforward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/VolumeFTPPortforward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).VolumeFTPPortforward(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ImgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ImgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ImgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ImgList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ImgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ImgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ImgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ImgInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ImgDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImgBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ImgDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ImgDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ImgDelete(ctx, req.(*ImgBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ImgBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImgBuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ImgBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ImgBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ImgBuild(ctx, req.(*ImgBuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_ImgBuildLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YBServer).ImgBuildLog(m, &yBImgBuildLogServer{stream})
}

type YB_ImgBuildLogServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type yBImgBuildLogServer struct {
	grpc.ServerStream
}

func (x *yBImgBuildLogServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _YB_ImgBuildLogTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).ImgBuildLogTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/ImgBuildLogTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).ImgBuildLogTail(ctx, req.(*TailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_PrdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).PrdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/PrdList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).PrdList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_PrdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).PrdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/PrdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).PrdInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvList(ctx, req.(*AppListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvCreate(ctx, req.(*SrvCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvDestroy(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvStart(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvStop(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvAttachDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvDomainAttachReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvAttachDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvAttachDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvAttachDomain(ctx, req.(*SrvDomainAttachReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvDetachDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvDomainAttachReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvDetachDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvDetachDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvDetachDomain(ctx, req.(*SrvDomainAttachReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PunchedCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvOperator(ctx, req.(*PunchedCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvPortforward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvPortforward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvPortforward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvPortforward(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvConfigSet(ctx, req.(*SrvConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_SrvConfigUnset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).SrvConfigUnset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/SrvConfigUnset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).SrvConfigUnset(ctx, req.(*UnsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppList(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppInfo(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppCreate(ctx, req.(*AppCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppDestroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppDestroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppDestroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppDestroy(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YBServer).AppLog(m, &yBAppLogServer{stream})
}

type YB_AppLogServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type yBAppLogServer struct {
	grpc.ServerStream
}

func (x *yBAppLogServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _YB_AppLogTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppLogTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppLogTail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppLogTail(ctx, req.(*TailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvConfigSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppConfigSet(ctx, req.(*SrvConfigSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppConfigUnset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppConfigUnset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppConfigUnset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppConfigUnset(ctx, req.(*UnsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppAddEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAddEnvironmentVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppAddEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppAddEnvironmentVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppAddEnvironmentVariable(ctx, req.(*AppAddEnvironmentVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppRemoveEnvironmentVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppRemoveEnvironmentVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppRemoveEnvironmentVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppRemoveEnvironmentVariable(ctx, req.(*UnsetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppReset(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppStop(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppStart(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppShell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppShell(ctx, req.(*ShellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppAttachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeMount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppAttachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppAttachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppAttachVolume(ctx, req.(*VolumeMount))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppDetachVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppDetachVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppDetachVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppDetachVolume(ctx, req.(*AttachIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppAttachDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvDomainAttachReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppAttachDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppAttachDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppAttachDomain(ctx, req.(*SrvDomainAttachReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppDetachDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SrvDomainAttachReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppDetachDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppDetachDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppDetachDomain(ctx, req.(*SrvDomainAttachReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppSrvBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSrvBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppSrvBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppSrvBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppSrvBind(ctx, req.(*AppSrvBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _YB_AppSrvUnBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSrvBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YBServer).AppSrvUnBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.YB/AppSrvUnBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YBServer).AppSrvUnBind(ctx, req.(*AppSrvBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _YB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yb.YB",
	HandlerType: (*YBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _YB_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _YB_Logout_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _YB_AccountInfo_Handler,
		},
		{
			MethodName: "AccountUpdate",
			Handler:    _YB_AccountUpdate_Handler,
		},
		{
			MethodName: "MonitoringQuota",
			Handler:    _YB_MonitoringQuota_Handler,
		},
		{
			MethodName: "MonitoringResource",
			Handler:    _YB_MonitoringResource_Handler,
		},
		{
			MethodName: "MonitoringTraffic",
			Handler:    _YB_MonitoringTraffic_Handler,
		},
		{
			MethodName: "MonitoringLatency",
			Handler:    _YB_MonitoringLatency_Handler,
		},
		{
			MethodName: "ActivityList",
			Handler:    _YB_ActivityList_Handler,
		},
		{
			MethodName: "DomainList",
			Handler:    _YB_DomainList_Handler,
		},
		{
			MethodName: "DomainInfo",
			Handler:    _YB_DomainInfo_Handler,
		},
		{
			MethodName: "DomainToggleTLS",
			Handler:    _YB_DomainToggleTLS_Handler,
		},
		{
			MethodName: "DomainCreate",
			Handler:    _YB_DomainCreate_Handler,
		},
		{
			MethodName: "DomainDelete",
			Handler:    _YB_DomainDelete_Handler,
		},
		{
			MethodName: "VolumeSpecList",
			Handler:    _YB_VolumeSpecList_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _YB_VolumeList_Handler,
		},
		{
			MethodName: "VolumeInfo",
			Handler:    _YB_VolumeInfo_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _YB_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _YB_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeFTPPortforward",
			Handler:    _YB_VolumeFTPPortforward_Handler,
		},
		{
			MethodName: "ImgList",
			Handler:    _YB_ImgList_Handler,
		},
		{
			MethodName: "ImgInfo",
			Handler:    _YB_ImgInfo_Handler,
		},
		{
			MethodName: "ImgDelete",
			Handler:    _YB_ImgDelete_Handler,
		},
		{
			MethodName: "ImgBuild",
			Handler:    _YB_ImgBuild_Handler,
		},
		{
			MethodName: "ImgBuildLogTail",
			Handler:    _YB_ImgBuildLogTail_Handler,
		},
		{
			MethodName: "PrdList",
			Handler:    _YB_PrdList_Handler,
		},
		{
			MethodName: "PrdInfo",
			Handler:    _YB_PrdInfo_Handler,
		},
		{
			MethodName: "SrvList",
			Handler:    _YB_SrvList_Handler,
		},
		{
			MethodName: "SrvInfo",
			Handler:    _YB_SrvInfo_Handler,
		},
		{
			MethodName: "SrvCreate",
			Handler:    _YB_SrvCreate_Handler,
		},
		{
			MethodName: "SrvDestroy",
			Handler:    _YB_SrvDestroy_Handler,
		},
		{
			MethodName: "SrvStart",
			Handler:    _YB_SrvStart_Handler,
		},
		{
			MethodName: "SrvStop",
			Handler:    _YB_SrvStop_Handler,
		},
		{
			MethodName: "SrvAttachDomain",
			Handler:    _YB_SrvAttachDomain_Handler,
		},
		{
			MethodName: "SrvDetachDomain",
			Handler:    _YB_SrvDetachDomain_Handler,
		},
		{
			MethodName: "SrvOperator",
			Handler:    _YB_SrvOperator_Handler,
		},
		{
			MethodName: "SrvPortforward",
			Handler:    _YB_SrvPortforward_Handler,
		},
		{
			MethodName: "SrvConfigSet",
			Handler:    _YB_SrvConfigSet_Handler,
		},
		{
			MethodName: "SrvConfigUnset",
			Handler:    _YB_SrvConfigUnset_Handler,
		},
		{
			MethodName: "AppList",
			Handler:    _YB_AppList_Handler,
		},
		{
			MethodName: "AppInfo",
			Handler:    _YB_AppInfo_Handler,
		},
		{
			MethodName: "AppCreate",
			Handler:    _YB_AppCreate_Handler,
		},
		{
			MethodName: "AppDestroy",
			Handler:    _YB_AppDestroy_Handler,
		},
		{
			MethodName: "AppLogTail",
			Handler:    _YB_AppLogTail_Handler,
		},
		{
			MethodName: "AppConfigSet",
			Handler:    _YB_AppConfigSet_Handler,
		},
		{
			MethodName: "AppConfigUnset",
			Handler:    _YB_AppConfigUnset_Handler,
		},
		{
			MethodName: "AppAddEnvironmentVariable",
			Handler:    _YB_AppAddEnvironmentVariable_Handler,
		},
		{
			MethodName: "AppRemoveEnvironmentVariable",
			Handler:    _YB_AppRemoveEnvironmentVariable_Handler,
		},
		{
			MethodName: "AppReset",
			Handler:    _YB_AppReset_Handler,
		},
		{
			MethodName: "AppStop",
			Handler:    _YB_AppStop_Handler,
		},
		{
			MethodName: "AppStart",
			Handler:    _YB_AppStart_Handler,
		},
		{
			MethodName: "AppShell",
			Handler:    _YB_AppShell_Handler,
		},
		{
			MethodName: "AppAttachVolume",
			Handler:    _YB_AppAttachVolume_Handler,
		},
		{
			MethodName: "AppDetachVolume",
			Handler:    _YB_AppDetachVolume_Handler,
		},
		{
			MethodName: "AppAttachDomain",
			Handler:    _YB_AppAttachDomain_Handler,
		},
		{
			MethodName: "AppDetachDomain",
			Handler:    _YB_AppDetachDomain_Handler,
		},
		{
			MethodName: "AppSrvBind",
			Handler:    _YB_AppSrvBind_Handler,
		},
		{
			MethodName: "AppSrvUnBind",
			Handler:    _YB_AppSrvUnBind_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImgBuildLog",
			Handler:       _YB_ImgBuildLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AppLog",
			Handler:       _YB_AppLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "YB.proto",
}
