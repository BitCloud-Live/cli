syntax = "proto3";
package yb;

service YB {
    // Authentication
    rpc Login (LoginReq) returns (AuthenticationRes) { }
    rpc Logout (Empty) returns (Empty) { }

    // Added in v2.3 patch
    // Monitoring
    rpc MonitoringResources(Identity) returns (ResourcesRes) { } // (App OR Srv)
    rpc MonitoringQueriesTraffic(Identity) returns (TrafficRes) { } // (only App)
    rpc MonitoringQueriesLatency(Identity) returns (LatencyRes) { } // (only App)
    rpc ActivityList(ActivityReq) returns (ActivityListRes) { }

    // Domain
    rpc DomainList (AppListReq) returns (DomainListRes) { }
    rpc DomainInfo (Identity) returns (DomainStatusRes) { } 
    rpc DomainCreate (DomainCreateReq) returns (DomainStatusRes) { }
    rpc DomainDelete (Identity) returns (Empty) { }
    // //Added in v2.3 patch
    // rpc DomainAddRoute (Identity) returns (DomainStatusRes) { }
    // rpc DomainRemoveRoute (Identity) returns (DomainStatusRes) { }
    // //Get all available domain features
    // rpc DomainFeatureList (Empty) returns (DomainFeatures) { }

    // Volume
    rpc VolumeSpecList (ListReq) returns (VolumeSpecListRes) { }
    rpc VolumeSpecInfo (Identity) returns (VolumeSpec) { }
    rpc VolumeList (AppListReq) returns (VolumeListRes) { }
    rpc VolumeInfo (Identity) returns (VolumeStatusRes) { }
    rpc VolumeCreate (VolumeCreateReq) returns (VolumeStatusRes) { }
    rpc VolumeDelete (Identity) returns (Empty) { }
    rpc VolumeFTPPortforward (Identity) returns (PortforwardRes) { }

    // Image
    rpc ImgList (AppListReq) returns (ImgListRes) { }
    rpc ImgInfo (Identity) returns (ImgStatusRes) { }
    //Added in v2.3 patch
    rpc ImgBuild (ImgBuildReq) returns (ImgStatusRes) { }
    rpc ImgDelete (Identity) returns (Empty) { }

    // Product
    rpc PrdList (ListReq) returns (PrdListRes) { }
    rpc PrdInfo (Identity) returns (ProductRes) { }

    // Setting
    rpc SetList (AppListReq) returns (ListStatusRes) { }
    rpc SetInfo (SettingInfoReq) returns (SettingRes) { }
    rpc SetAdd (SettingReq) returns (SettingRes) { }
    rpc SetUpdate (SettingReq) returns (SettingRes) { }
    rpc SetDelete (SettingInfoReq) returns (Empty) { }
    
    // Service
    rpc SrvList (AppListReq) returns (SrvListRes) { }
    rpc SrvCreate (SrvCreateReq) returns (SrvStatusRes) { }
    rpc SrvChangePlan (ChangePlanReq) returns (SrvStatusRes) { }
    rpc SrvPortforward (Identity) returns (PortforwardRes) { }
    rpc SrvStart (Identity) returns (SrvStatusRes) { }
    rpc SrvStop (Identity) returns (SrvStatusRes) { }
    rpc SrvDestroy (Identity) returns (Empty) { }
    rpc SrvInfo (Identity) returns (SrvStatusRes) { }
    //SrvAttachDomain Deprecated: will be deleted in v3.0
    rpc SrvAttachDomain (SrvDomainAttachReq) returns (SrvStatusRes) { }
    //SrvDetachDomain Deprecated: will be deleted in v3.0
    rpc SrvDetachDomain (AttachIdentity) returns (SrvStatusRes) { }
    //Added in v2.1 patch
    rpc SrvConfigSet (SrvConfigSetReq) returns (SrvStatusRes) { } 
    rpc SrvConfigUnset (UnsetReq) returns (SrvStatusRes) { } 

    // Application
    rpc AppInfo (Identity) returns (AppStatusRes) { }
    rpc AppList (ListReq) returns (SrvListRes) { }
    rpc AppCreate (AppCreateReq) returns (AppStatusRes) { }
    rpc AppChangePlan (ChangePlanReq) returns (AppStatusRes) { }
    rpc AppLog (Identity) returns (stream Chunk) { }
    rpc AppConfigSet (ConfigSetReq) returns (AppStatusRes) { } //TODO: maybe splits to some functions
    rpc AppConfigUnset (UnsetReq) returns (AppStatusRes) { }
    rpc AppAddEnvironmentVariable (AppAddEnvironmentVariableReq) returns (AppStatusRes) { }
    rpc AppRemoveEnvironmentVariable (UnsetReq) returns (AppStatusRes) { }
    rpc AppReset (Identity) returns (AppStatusRes) { }
    rpc AppAttachVolume (VolumeAttachReq) returns (AppStatusRes) { }
    rpc AppDetachVolume (AttachIdentity) returns (AppStatusRes) { }
    //AppAttachDomain23 Deprecated: will be deleted in v3.0
    rpc AppAttachDomain23 (SrvDomainAttachReq) returns (AppStatusRes) { }
    //AppAttachDomain Deprecated: will be deleted in v3.0
    rpc AppAttachDomain (AttachIdentity) returns (AppStatusRes) { }
    //AppDetachDomain Deprecated: will be deleted in v3.0
    rpc AppDetachDomain (AttachIdentity) returns (AppStatusRes) { }
    rpc AppStop (Identity) returns (AppStatusRes) { }
    rpc AppStart (Identity) returns (AppStatusRes) { }
    rpc AppDestroy (Identity) returns (Empty) { }
    rpc AppSrvBind (AppSrvBindReq) returns (AppStatusRes) { }
    rpc AppSrvUnBind (AppSrvBindReq) returns (AppStatusRes) { }

    //Added in v2.3 patch
    rpc AppFTPPortforward (Identity) returns (PortforwardRes) { }
    //Added in v2.1 patch
    //AppNFSPortforward Deprecated: will be deleted in v3.0
    rpc AppNFSPortforward (Identity) returns (PortforwardRes) { }
    rpc AppListWorkers (Identity) returns (WorkerListRes) { }
    rpc AppAddWorker (WorkerReq) returns (WorkerListRes) { }
    rpc AppWorkerUpdate (WorkerReq) returns (WorkerRes) { }
    rpc AppRemoveWorker (AttachIdentity) returns (WorkerListRes) { }
    rpc AppWorkerInfo (AttachIdentity) returns (WorkerRes) { }
    rpc AppWorkerPortforward (AttachIdentity) returns (PortforwardRes) { }
}

// Authentication ////////////////////////////////////////////////////////////////////

message LoginReq {
    string email = 1;
    string password = 2;
}

message AuthenticationRes {
    string token = 1;
}

// Genral messages  //////////////////////////////////////////////////////////////////

enum ServiceState {
    Err = 0;
    Up = 1;
    Stop = 2;
    Suspend = 3;
    Pending = 4;
    Unknown = 5;
}

message Empty { }

// ID for select [service, application, image]
message Identity {
    string name = 1;
}

message Timestamp {
    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    int32 nanos = 2;
}

message AttachIdentity{
    string name = 1;
    string attachment = 2;
}

message AppListReq {
    int32 index = 1; // [default = 0]
    string app = 2; // To get a list of all the applications, dont sent application name
}

message ListReq {
    int32 index = 1; // [default = 0]
}

message ListStatusRes {
    int32 index = 1; // [default = 0]
    repeated string names = 2;
}

message Chunk {
    bytes chunk = 1;
}

message PortforwardRes {
    string svc = 1;
    repeated string ports = 2;
    bytes token = 3;
    string proxyHost = 4;
}

// Domain ////////////////////////////////////////////////////////////////////////////

message DomainCreateReq {
    string domain = 1;
    bool tls = 2;
}

message DomainStatusRes {
    Timestamp created = 1;
    Timestamp updated = 2;
    string name = 3;
    string domain = 4;
    string tls = 5;
    string attachedTo = 6;
    //Added in v2.3 patch
    string path = 7;

}

message DomainListRes {
    int32 index = 1; // [default = 0]
    repeated DomainStatusRes domains = 2;
}

// //Added in v2.3 patch
// message DomainRouteReq{
//     string domain = 1;
//     string endpoint = 2;
//     string path = 3;
//     map<string, string> featureRequests = 4;
// }

//For embedded response
//AttachedDomainInfo Deprecated: will be deleted in v3.0
message AttachedDomainInfo{
    string domain = 1;
    string endpoint = 2;
    string endpointType = 3;
    //Added in v2.3 patch
    string path = 4;
}

// Volume ////////////////////////////////////////////////////////////////////////////

message VolumeCreateReq {
    string name = 1;
    string spec = 2;
}

message VolumeAttachReq{
    string name = 1;
    string attachment = 2;
    string mountPath = 3;
}

message VolumeSpec {
    string name = 1;
    string class = 2;
    string size = 4;
}

message VolumeSpecListRes {
    int32 index = 1; // [default = 0]
    repeated VolumeSpec volumeSpecs = 2;
}

message VolumeStatusRes {
    Timestamp created = 1;
    Timestamp updated = 2;
    string name = 3;
    VolumeSpec spec = 4;
    string attachedTo = 5;
    string mountPath = 6;
}

message VolumeListRes{
    int32 index = 1; // [default = 0]
    repeated VolumeStatusRes volumes = 2;
}

// Image /////////////////////////////////////////////////////////////////////////////

message ImgStatusRes {
    Timestamp created = 1;
    Timestamp updated = 2;
    string name = 3;
    repeated string tags = 4;
}

message ImgListRes {
    int32 index = 1; // [default = 0]
    repeated ImgStatusRes imgs = 2;
}

message ImgBuildReq {
    string name = 1;
    string tags = 2;
    bytes data = 3; // zip (Dockerfile + Assets)
}

// Setting ///////////////////////////////////////////////////////////////////////////

message SettingInfoReq {
    string name = 1;
    string app = 2;
}

message SettingReq{
    string name = 1;
    string app = 2;
    string path = 3;
    bytes file = 4;
}

message SettingRes{
    Timestamp created = 1;
    Timestamp updated = 2;
    string name = 3;
    string app = 4;
    string path = 5;
    bytes file = 6;
}

// Service ///////////////////////////////////////////////////////////////////////////

message ProductRes {
    string name = 1;
    string description = 2;
    repeated Plan plan = 3;
    //Deprecated: will be deleted in v3.0
    //Keep this for backward compatibilty
    map<string, string> variable_hints = 4;
    //Added in v2.1 patch
    map<string, ProductVariable> variables = 5;
}

//Added in v2.1 patch
message ProductListRow {
    string name = 1;
    string description = 2;
}

//Added in v2.1 patch
message PrdListRes {
    int32 index = 1; // [default = 0]
    repeated ProductListRow rows = 2;
}

//Added in v2.1 patch
message ProductVariable{
       string name = 1;
       string defaultValue = 2;
       bool isRequired = 3;
       string type = 4;
       string description = 5;
}

//Added in v2.1 patch
message SrvConfigSetReq{
    string name = 1;
    map<string, string> variables = 2;
}

message Plan {
    string name = 1;
    string description = 2;
    uint64 price = 3;
    uint64 off = 4;
}

message SrvStatusRes {
    Timestamp created = 1;
    Timestamp updated = 2;
    ServiceState state = 3;
    string name = 4;
    string plan = 5;
    string vcapServices = 6;
    // used for information of service like: [ports, uri, username, ...]
    map<string, string> variable = 7;
    repeated AttachedDomainInfo domains = 8;
    repeated string endpoints = 9;

    //Added in v2.1 patch
    string serviceRefrence = 10;
    //Name(s) of the peer(s) that this service instance bounded to
    repeated string boundTo = 11;
}

//For embedded response
message ServiceRes {
    Timestamp updated = 1;
    ServiceState state = 2;
    string name = 3;
    //Added in v2.1 patch
    string serviceRefrence = 4;
}

message SrvListRes {
    int32 index = 1; // [default = 0]
    repeated ServiceRes services = 2;
}

message SrvDomainAttachReq{
    AttachIdentity attachIdentity = 1;
    string endpoint = 2;
    //Added in v2.3 patch
    string path = 3;
}

message SrvCreateReq {
    string productName = 1;
    string name = 2;
    string plan = 3;
    map<string, string> variable = 4;
}

//Added in v2.1 patch
// Worker  //////////////////////////////////////////////////////////////////////

message WorkerRes{
    Timestamp created = 1;
    Timestamp updated = 2;
    ServiceState state = 3;
    string name = 4;
    WorkerConfig config = 5;
}
message WorkerConfig{
    string image = 1;
    uint64 port = 2;
}
message WorkerReq{
    AttachIdentity identities = 4;
    WorkerConfig config = 5;
}

message WorkerListRes {
    int32 index = 1; // [default = 0]
    repeated WorkerRes services = 2;
}

// Application  //////////////////////////////////////////////////////////////////////

message AppStatusRes {
    Timestamp created = 1;
    Timestamp updated = 2;
    ServiceState state = 3;
    string name = 4;
    string plan = 5;
    AppConfig config = 6;
    map<string, string> environmentVariables = 7;
    string vcapServices = 8;
}

message AppCreateReq {
    string name = 1;
    string plan = 2;
    AppConfig config = 3;
}

message ConfigSetReq {
    string name = 1;
    AppConfig config = 2;
}

message AppConfig {
    string image = 1;
    uint64 minScale = 2;
    uint64 port = 3;
    repeated string routes = 4;
    string endpointType = 5;
}

message UnsetReq {
    string name = 1;
    repeated string variables = 2;
}

message ChangePlanReq {
    string name = 1;
    string plan = 2;
}

message AppAddEnvironmentVariableReq {
    string name = 1;
    map<string, string> variables = 2;
}

message AppSrvBindReq {
    string name = 1;
    string service = 2;
}

// Monitoring //////////////////////////////////////////////////////////////////////

message ResourcesRes {
    Timestamp start = 1; // time of the beginning
    uint64 stepPerod = 2; // time interval
    string name = 3;
    repeated uint64 core = 4;
    repeated uint64 ram = 5;
}

message Hit {
    string path = 1; // path or domain of queries
    repeated uint64 hit = 2; // QPS
}

message TrafficRes {
    Timestamp start = 1; // time of the beginning
    uint64 stepPerod = 2; // time interval
    string name = 3; // application name
    repeated Hit hits = 4;
}

message Latency {
    string path = 1; // path or domain of queries
    repeated uint64 latency = 2; // average latency in one-step of the time interval
}

message LatencyRes {
    Timestamp start = 1; // time of the beginning
    uint64 stepPerod = 2; // time interval
    string name = 3; // application name
    repeated Latency latencies = 4;
}

enum ActivityTag {
    None = 0; //No tag
    User = 1; // User_Authentication, User_Setting, ...
    Payment = 2;
    Application = 3;
    Domain = 4;
    Service = 5;
    Image = 6;
    ObjectStorage = 7;
    BlockStorage = 8;

    //‌Bindings
    AppSrvBinding = 9;
    AppDomBinding = 10;
    AppVolBinding = 11;
    SrvDomBinding = 12;
}

message Activity {
    Timestamp time = 1;
    ActivityTag tag = 2;
    string name = 3;
    string attachment = 4; //When tag is binding, otherwise empty
    string type = 5;
    string email = 6;
    string description = 7;
}

message ActivityReq {
    int32 index = 1; // [default = 0]
    ActivityTag tag = 2;//tag for filter
    string name = 3; //name for filter
}

message ActivityListRes {
    int32 index = 1; // [default = 0]
    repeated Activity activities = 2;
}
